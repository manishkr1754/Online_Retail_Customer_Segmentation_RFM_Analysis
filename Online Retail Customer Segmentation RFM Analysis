{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/manishkr1754/online-retail-customer-segmentation-rfm-analysis?scriptVersionId=149691244\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"---\n\n<center><h1>Online Retail Customer Segmentation RFM Analysis</h1></center>\n<center><h3>Detailed Notebook Step-by-Step from Basics to Advanced</h3></center>\n\n---","metadata":{}},{"cell_type":"markdown","source":"## Process Flow of Project\n\n1. Understanding Problem Statement\n2. Understanding concept of RFM Analysis\n3. Getting System Ready\n4. Understanding the Data-Data Eyeballing & Data Description\n5. Data Cleaning & Preprocessing\n6. RFM Metrics & Scores Calculation\n7. Segmenting Customers based RFM Scores **(Manual Approach - Without Model Buidling)**\n8. Model I : K-Means Clustering\n9. Model II : Hierarchical Clustering\n10. Interpretation on different Customer Segmentation results","metadata":{}},{"cell_type":"markdown","source":"## 1) Understanding Problem Statement\n---\n\n### Problem Statement:\nOnline retailers have a vast customer base with diverse shopping behaviors. To enhance marketing strategies and customer engagement, there is a need to segment customers into distinct groups based on their recency, frequency and monetary (RFM) characteristics. This project aims to segment customers effectively to provide tailored marketing campaigns and improve overall business performance.\n\n### Approach:\nGiven that the data is already available, the approach involves preprocessing the existing online retail transaction data, calculating **RFM metrics*, applying **K-Means** and **Hierarchical clustering** for customer segmentation, interpreting and labeling clusters and using insights to optimize marketing strategies and enhance customer engagement.\n\n### Objective:\nTo effectively segment online retail customers based on their RFM characteristics using clustering techniques (K-Means and Hierarchical) to improve targeted marketing, boost revenue, enhance customer retention, optimize inventory management and increase overall customer satisfaction.\n\n### Benefits:\nThe benefits of this solution include:\n\n- **Improved Customer Engagement:** Tailored marketing campaigns and personalized recommendations for each customer segment lead to higher engagement and conversion rates.\n\n- **Increased Revenue:** Targeting high-value customer segments with the right offers can boost sales and revenue.\n\n- **Customer Retention:** Identifying at-risk and churned customer segments allows for proactive retention efforts.\n\n- **Resource Optimization:** Efficient allocation of resources in inventory management and marketing efforts based on customer preferences.\n\n- **Enhanced Customer Satisfaction:** Providing customers with products and offers that match their preferences leads to higher satisfaction and loyalty.\n\n- **Data-Driven Decision Making:** The project promotes data-driven decision-making, helping the company adapt to changing customer behaviors and market trends.\n\n- **Competitive Advantage:** The ability to understand and cater to customer segments better can provide a competitive edge in the online retail industry.","metadata":{}},{"cell_type":"markdown","source":"## 2) Understanding concept of RFM Analysis\n---\n\n### Recency Frequency Monetary (RFM) Analysis\n\nRFM Analysis is a **customer segmentation technique** used by businesses to better understand and categorize their customers based on their **past purchasing behavior**. This approach helps companies identify and target specific customer groups for marketing and personalization efforts. Here's a breakdown of the three components of RFM Analysis:\n\n1. **Recency (R):** Recency refers to **how recently a customer has made a purchase or interacted with your business**. It is typically measured in terms of the **number of days since the last purchase or interaction**. Customers who have engaged with your business **more recently** are often considered **more valuable** because they are more likely to make repeat purchases.\n\n   - Example: A customer who made a purchase 3 days ago is considered more recent than a customer who made a purchase 3 months ago.\n\n2. **Frequency (F):** Frequency measures **how often a customer makes purchases or interacts with your business** over a specific period such as a year. It represents **customer loyalty and engagement**. Customers who buy from you frequently are more likely to be loyal and responsive to promotions.\n\n   - Example: A customer who makes monthly purchases is considered more frequent than a customer who makes annual purchases.\n\n3. **Monetary (M):** Monetary represents the **total amount of money a customer has spent on your products or services**. It helps determine the **value or profitability of each customer**. Customers who have **spent more money** are typically considered **high-value customers**.\n\n   - Example: A customer who has spent Rs. 1,000 with your business is considered more valuable than a customer who has spent Rs. 100.\n\n<br>\n\n### Approach behind RFM Analysis\n\nRFM Analysis involves **scoring or ranking** customers based on these three dimensions. Each dimension is typically divided into **categories or percentiles** (e.g. quintiles or deciles) and customers are assigned scores or labels based on where they fall within these categories. For example, you might score recency from 1 to 5, with 5 being the most recent and do the same for frequency and monetary value. Once customers are assigned RFM scores, they can be segmented into different groups. These segments can then be used for various marketing and customer engagement strategies such as:\n\n- **Targeted marketing campaigns:** Focus marketing efforts on high RFM-score segments that are more likely to respond positively.\n- **Customer retention:** Identify at-risk customers (e.g. low frequency or monetary value) and implement strategies to retain them.\n- **Personalization:** Tailor product recommendations or content to match the preferences and behavior of each segment.\n- **Product development:** Use RFM insights to inform product or service offerings for different customer segments.\n\n<br>\n\n### Real Life Industry Applications\n\n1. **Retail Industry:**\n   - **Promotion Targeting:** Retailers use RFM segments to identify high-value customers who are more likely to respond positively to discounts and promotions. They can then tailor their marketing campaigns to specifically target these segments.\n   - **Inventory Management:** RFM can help retailers manage inventory by understanding which products are most popular among different customer segments. This information helps optimize stock levels and product placement.\n\n2. **E-commerce:**\n   - **Personalized Recommendations:** Online retailers use RFM data to provide personalized product recommendations to customers based on their past behavior, increasing the likelihood of additional purchases.\n   - **Cart Abandonment Recovery:** RFM can help identify customers who frequently abandon their shopping carts. Retailers can then send targeted follow-up emails or incentives to encourage them to complete their purchases.\n\n3. **Hospitality and Tourism:**\n   - **Customer Loyalty Programs:** Hotels and airlines use RFM analysis to reward loyal customers with special offers, upgrades or discounts thereby encouraging repeat bookings.\n   - **Seasonal Pricing:** Understanding the recency and frequency of bookings allows businesses in this sector to adjust pricing strategies for different seasons and periods of high demand.\n\n4. **Financial Services:**\n   - **Risk Assessment:** Banks and insurance companies use RFM Analysis to assess customer risk. Customers who exhibit erratic behavior in terms of recency, frequency and monetary transactions may be flagged for further review.\n   - **Cross-Selling:** Financial institutions can identify opportunities to cross-sell or upsell products and services to customers based on their RFM profiles.\n\n5. **Subscription Services:**\n   - **Churn Prediction:** Subscription-based businesses like streaming services or SaaS companies use RFM to predict customer churn. They can then take proactive measures to retain customers showing signs of disengagement.\n   - **Tiered Pricing:** Different subscription tiers can be offered to customers based on their RFM scores, ensuring that they receive the level of service that matches their value to the business.\n\n6. **Healthcare:**\n   - **Patient Engagement:** Healthcare providers use RFM to segment patients and tailor communication strategies to encourage regular check-ups or follow-up appointments.\n   - **Medication Adherence:** Understanding the frequency and recency of prescription refills can help healthcare professionals identify patients who may need additional support to adhere to their treatment plans.\n\n7. **Nonprofits and Fundraising:**\n   - **Donor Engagement:** Nonprofit organizations analyze RFM to identify and engage with their most committed donors, helping to optimize fundraising efforts and donor retention.\n   - **Campaign Effectiveness:** Understanding the monetary contributions and recency of donations can help nonprofits assess the success of various fundraising campaigns.\n","metadata":{}},{"cell_type":"markdown","source":"## 3) Getting System Ready\n---\n\n### Import Required Packages\nImporting Pandas, Numpy, Matplotlib, Seaborn, libraries for Clustering and Warnings Library","metadata":{}},{"cell_type":"code","source":"# import required libraries for dataframe and visualization\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\n\n\n# import required libraries for clustering\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:15.415047Z","iopub.execute_input":"2023-11-07T11:23:15.415462Z","iopub.status.idle":"2023-11-07T11:23:16.519772Z","shell.execute_reply.started":"2023-11-07T11:23:15.415428Z","shell.execute_reply":"2023-11-07T11:23:16.518462Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"## 4) Understanding the Data-Data Eyeballing & Data Description\n---\n\nOnline retail Dataset is a transnational data set which contains all the transactions occurring between 01/12/2009 and 09/12/2011 for a UK-based and registered non-store online retail. The company mainly sells unique all-occasion gifts. Many customers of the company are wholesalers.\n\n[Dataset Source](https://archive.ics.uci.edu/dataset/352/online+retail)\n\nThe given dataset has two sheet Year 2009-2010 and 2010-2011. We need to concatenate both sheets into one DataFrame. I have already concatenated the dataset and saved as .csv","metadata":{}},{"cell_type":"code","source":"retail = pd.read_csv('/kaggle/input/online-retail-data/retail.csv')\nretail","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:20.053872Z","iopub.execute_input":"2023-11-07T11:23:20.054888Z","iopub.status.idle":"2023-11-07T11:23:21.855231Z","shell.execute_reply.started":"2023-11-07T11:23:20.054853Z","shell.execute_reply":"2023-11-07T11:23:21.854159Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"        Invoice StockCode                          Description  Quantity  \\\n0        489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n1        489434    79323P                   PINK CHERRY LIGHTS        12   \n2        489434    79323W                  WHITE CHERRY LIGHTS        12   \n3        489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n4        489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n...         ...       ...                                  ...       ...   \n1067366  581587     22899         CHILDREN'S APRON DOLLY GIRL          6   \n1067367  581587     23254        CHILDRENS CUTLERY DOLLY GIRL          4   \n1067368  581587     23255      CHILDRENS CUTLERY CIRCUS PARADE         4   \n1067369  581587     22138        BAKING SET 9 PIECE RETROSPOT          3   \n1067370  581587      POST                              POSTAGE         1   \n\n                 InvoiceDate  Price  Customer ID         Country  \n0        2009-12-01 07:45:00   6.95      13085.0  United Kingdom  \n1        2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n2        2009-12-01 07:45:00   6.75      13085.0  United Kingdom  \n3        2009-12-01 07:45:00   2.10      13085.0  United Kingdom  \n4        2009-12-01 07:45:00   1.25      13085.0  United Kingdom  \n...                      ...    ...          ...             ...  \n1067366  2011-12-09 12:50:00   2.10      12680.0          France  \n1067367  2011-12-09 12:50:00   4.15      12680.0          France  \n1067368  2011-12-09 12:50:00   4.15      12680.0          France  \n1067369  2011-12-09 12:50:00   4.95      12680.0          France  \n1067370  2011-12-09 12:50:00  18.00      12680.0          France  \n\n[1067371 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Invoice</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>Price</th>\n      <th>Customer ID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>489434</td>\n      <td>85048</td>\n      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.95</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>489434</td>\n      <td>79323P</td>\n      <td>PINK CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>489434</td>\n      <td>79323W</td>\n      <td>WHITE CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>489434</td>\n      <td>22041</td>\n      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n      <td>48</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>2.10</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>489434</td>\n      <td>21232</td>\n      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n      <td>24</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>1.25</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1067366</th>\n      <td>581587</td>\n      <td>22899</td>\n      <td>CHILDREN'S APRON DOLLY GIRL</td>\n      <td>6</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>2.10</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067367</th>\n      <td>581587</td>\n      <td>23254</td>\n      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n      <td>4</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>4.15</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067368</th>\n      <td>581587</td>\n      <td>23255</td>\n      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n      <td>4</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>4.15</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067369</th>\n      <td>581587</td>\n      <td>22138</td>\n      <td>BAKING SET 9 PIECE RETROSPOT</td>\n      <td>3</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>4.95</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067370</th>\n      <td>581587</td>\n      <td>POST</td>\n      <td>POSTAGE</td>\n      <td>1</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>18.00</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n  </tbody>\n</table>\n<p>1067371 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print('The size of Dataframe is: ', retail.shape)\nprint('-'*100)\nprint('The Column Name, Record Count and Data Types are as follows: ')\nretail.info()\nprint('-'*100)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:21.857037Z","iopub.execute_input":"2023-11-07T11:23:21.857383Z","iopub.status.idle":"2023-11-07T11:23:22.133094Z","shell.execute_reply.started":"2023-11-07T11:23:21.857352Z","shell.execute_reply":"2023-11-07T11:23:22.131957Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"The size of Dataframe is:  (1067371, 8)\n----------------------------------------------------------------------------------------------------\nThe Column Name, Record Count and Data Types are as follows: \n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1067371 entries, 0 to 1067370\nData columns (total 8 columns):\n #   Column       Non-Null Count    Dtype  \n---  ------       --------------    -----  \n 0   Invoice      1067371 non-null  object \n 1   StockCode    1067371 non-null  object \n 2   Description  1062989 non-null  object \n 3   Quantity     1067371 non-null  int64  \n 4   InvoiceDate  1067371 non-null  object \n 5   Price        1067371 non-null  float64\n 6   Customer ID  824364 non-null   float64\n 7   Country      1067371 non-null  object \ndtypes: float64(2), int64(1), object(5)\nmemory usage: 65.1+ MB\n----------------------------------------------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"# Defining numerical & categorical columns\nnumeric_features = [feature for feature in retail.columns if retail[feature].dtype != 'O']\ncategorical_features = [feature for feature in retail.columns if retail[feature].dtype == 'O']\n\n# print columns\nprint('We have {} numerical features : {}'.format(len(numeric_features), numeric_features))\nprint('\\nWe have {} categorical features : {}'.format(len(categorical_features), categorical_features))","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:22.997011Z","iopub.execute_input":"2023-11-07T11:23:22.997433Z","iopub.status.idle":"2023-11-07T11:23:23.007105Z","shell.execute_reply.started":"2023-11-07T11:23:22.997399Z","shell.execute_reply":"2023-11-07T11:23:23.005839Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"We have 3 numerical features : ['Quantity', 'Price', 'Customer ID']\n\nWe have 5 categorical features : ['Invoice', 'StockCode', 'Description', 'InvoiceDate', 'Country']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Data Description\n\n- **Invoice:** Invoice number. A unique number for each transaction. If it starts with C which means cancelled operations.\n\n- **StockCode:** Product code. A unique number for each product.\n\n- **Description:** Product name.\n\n- **Quantity:** It refers to how many of the products in the invoices have been sold.\n\n- **InvoiceDate:** Invoice date.\n\n- **Price:** Product price (pound)\n\n- **Customer ID:** Unique customer number.\n\n- **Country:** The name of the country where the customer lives.","metadata":{}},{"cell_type":"code","source":"print('Missing Value Presence in different columns of DataFrame are as follows : ')\nprint('-'*100)\ntotal=retail.isnull().sum().sort_values(ascending=False)\npercent=(retail.isnull().sum()/retail.isnull().count()*100).sort_values(ascending=False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:25.332378Z","iopub.execute_input":"2023-11-07T11:23:25.332801Z","iopub.status.idle":"2023-11-07T11:23:26.068157Z","shell.execute_reply.started":"2023-11-07T11:23:25.332761Z","shell.execute_reply":"2023-11-07T11:23:26.06703Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Missing Value Presence in different columns of DataFrame are as follows : \n----------------------------------------------------------------------------------------------------\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"              Total    Percent\nCustomer ID  243007  22.766873\nDescription    4382   0.410541\nInvoice           0   0.000000\nStockCode         0   0.000000\nQuantity          0   0.000000\nInvoiceDate       0   0.000000\nPrice             0   0.000000\nCountry           0   0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Total</th>\n      <th>Percent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Customer ID</th>\n      <td>243007</td>\n      <td>22.766873</td>\n    </tr>\n    <tr>\n      <th>Description</th>\n      <td>4382</td>\n      <td>0.410541</td>\n    </tr>\n    <tr>\n      <th>Invoice</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>StockCode</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Quantity</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>InvoiceDate</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Price</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Country</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Summary Statistics of numerical features for DataFrame are as follows:')\nprint('-'*100)\nretail.describe()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:26.071043Z","iopub.execute_input":"2023-11-07T11:23:26.07213Z","iopub.status.idle":"2023-11-07T11:23:26.225184Z","shell.execute_reply.started":"2023-11-07T11:23:26.072086Z","shell.execute_reply":"2023-11-07T11:23:26.224217Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Summary Statistics of numerical features for DataFrame are as follows:\n----------------------------------------------------------------------------------------------------\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"           Quantity         Price    Customer ID\ncount  1.067371e+06  1.067371e+06  824364.000000\nmean   9.938898e+00  4.649388e+00   15324.638504\nstd    1.727058e+02  1.235531e+02    1697.464450\nmin   -8.099500e+04 -5.359436e+04   12346.000000\n25%    1.000000e+00  1.250000e+00   13975.000000\n50%    3.000000e+00  2.100000e+00   15255.000000\n75%    1.000000e+01  4.150000e+00   16797.000000\nmax    8.099500e+04  3.897000e+04   18287.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Quantity</th>\n      <th>Price</th>\n      <th>Customer ID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1.067371e+06</td>\n      <td>1.067371e+06</td>\n      <td>824364.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>9.938898e+00</td>\n      <td>4.649388e+00</td>\n      <td>15324.638504</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.727058e+02</td>\n      <td>1.235531e+02</td>\n      <td>1697.464450</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-8.099500e+04</td>\n      <td>-5.359436e+04</td>\n      <td>12346.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.000000e+00</td>\n      <td>1.250000e+00</td>\n      <td>13975.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.000000e+00</td>\n      <td>2.100000e+00</td>\n      <td>15255.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000e+01</td>\n      <td>4.150000e+00</td>\n      <td>16797.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>8.099500e+04</td>\n      <td>3.897000e+04</td>\n      <td>18287.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print('Summary Statistics of categorical features for DataFrame are as follows:')\nprint('-'*100)\nretail.describe(include= 'object')","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:27.094366Z","iopub.execute_input":"2023-11-07T11:23:27.094787Z","iopub.status.idle":"2023-11-07T11:23:27.83991Z","shell.execute_reply.started":"2023-11-07T11:23:27.094746Z","shell.execute_reply":"2023-11-07T11:23:27.838821Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Summary Statistics of categorical features for DataFrame are as follows:\n----------------------------------------------------------------------------------------------------\n","output_type":"stream"},{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"        Invoice StockCode                         Description  \\\ncount   1067371   1067371                             1062989   \nunique    53628      5305                                5698   \ntop      537434    85123A  WHITE HANGING HEART T-LIGHT HOLDER   \nfreq       1350      5829                                5918   \n\n                InvoiceDate         Country  \ncount               1067371         1067371  \nunique                47635              43  \ntop     2010-12-06 16:57:00  United Kingdom  \nfreq                   1350          981330  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Invoice</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>InvoiceDate</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1067371</td>\n      <td>1067371</td>\n      <td>1062989</td>\n      <td>1067371</td>\n      <td>1067371</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>53628</td>\n      <td>5305</td>\n      <td>5698</td>\n      <td>47635</td>\n      <td>43</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>537434</td>\n      <td>85123A</td>\n      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n      <td>2010-12-06 16:57:00</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>1350</td>\n      <td>5829</td>\n      <td>5918</td>\n      <td>1350</td>\n      <td>981330</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print('-'*125)\nprint('Checking records for mis-spell, typo-error etc.')\nprint('-'*125)\n\nprint(\"'Invoice' variable have {} unique category : \\n{}\\n\".format(retail['Invoice'].nunique(), retail['Invoice'].unique()))\nprint('-'*125)\n\nprint(\"'StockCode' variable have {} unique category : \\n{}\\n\".format(retail['StockCode'].nunique(), retail['StockCode'].unique()))\nprint('-'*125)\n\nprint(\"'Description' variable have {} unique category : \\n{}\\n\".format(retail['Description'].nunique(), retail['Description'].unique()))\nprint('-'*125)\n\nprint(\"'Country' variable have {} unique category : \\n{}\\n\".format(retail['Country'].nunique(), retail['Country'].unique()))\nprint('-'*125)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:27.842152Z","iopub.execute_input":"2023-11-07T11:23:27.842631Z","iopub.status.idle":"2023-11-07T11:23:28.405101Z","shell.execute_reply.started":"2023-11-07T11:23:27.842586Z","shell.execute_reply":"2023-11-07T11:23:28.403954Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"-----------------------------------------------------------------------------------------------------------------------------\nChecking records for mis-spell, typo-error etc.\n-----------------------------------------------------------------------------------------------------------------------------\n'Invoice' variable have 53628 unique category : \n['489434' '489435' '489436' ... '581585' '581586' '581587']\n\n-----------------------------------------------------------------------------------------------------------------------------\n'StockCode' variable have 5305 unique category : \n['85048' '79323P' '79323W' ... '23609' '23617' '23843']\n\n-----------------------------------------------------------------------------------------------------------------------------\n'Description' variable have 5698 unique category : \n['15CM CHRISTMAS GLASS BALL 20 LIGHTS' 'PINK CHERRY LIGHTS'\n ' WHITE CHERRY LIGHTS' ... 'mixed up'\n 'CREAM HANGING HEART T-LIGHT HOLDER' 'PAPER CRAFT , LITTLE BIRDIE']\n\n-----------------------------------------------------------------------------------------------------------------------------\n'Country' variable have 43 unique category : \n['United Kingdom' 'France' 'USA' 'Belgium' 'Australia' 'EIRE' 'Germany'\n 'Portugal' 'Japan' 'Denmark' 'Nigeria' 'Netherlands' 'Poland' 'Spain'\n 'Channel Islands' 'Italy' 'Cyprus' 'Greece' 'Norway' 'Austria' 'Sweden'\n 'United Arab Emirates' 'Finland' 'Switzerland' 'Unspecified' 'Malta'\n 'Bahrain' 'RSA' 'Bermuda' 'Hong Kong' 'Singapore' 'Thailand' 'Israel'\n 'Lithuania' 'West Indies' 'Lebanon' 'Korea' 'Brazil' 'Canada' 'Iceland'\n 'Saudi Arabia' 'Czech Republic' 'European Community']\n\n-----------------------------------------------------------------------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 5) Data Cleaning & Preprocessing\n---","metadata":{}},{"cell_type":"markdown","source":"### Missing Value Treatment","metadata":{}},{"cell_type":"code","source":"print('Missing Value Presence in different columns of DataFrame are as follows : ')\nprint('-'*100)\ntotal=retail.isnull().sum().sort_values(ascending=False)\npercent=(retail.isnull().sum()/retail.isnull().count()*100).sort_values(ascending=False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:33.545362Z","iopub.execute_input":"2023-11-07T11:23:33.545781Z","iopub.status.idle":"2023-11-07T11:23:34.308698Z","shell.execute_reply.started":"2023-11-07T11:23:33.54575Z","shell.execute_reply":"2023-11-07T11:23:34.307589Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Missing Value Presence in different columns of DataFrame are as follows : \n----------------------------------------------------------------------------------------------------\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"              Total    Percent\nCustomer ID  243007  22.766873\nDescription    4382   0.410541\nInvoice           0   0.000000\nStockCode         0   0.000000\nQuantity          0   0.000000\nInvoiceDate       0   0.000000\nPrice             0   0.000000\nCountry           0   0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Total</th>\n      <th>Percent</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Customer ID</th>\n      <td>243007</td>\n      <td>22.766873</td>\n    </tr>\n    <tr>\n      <th>Description</th>\n      <td>4382</td>\n      <td>0.410541</td>\n    </tr>\n    <tr>\n      <th>Invoice</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>StockCode</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Quantity</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>InvoiceDate</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Price</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Country</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"- **22.76%** of Customer ID is missing. Drop the columns as primary information Customer ID is missing.","metadata":{}},{"cell_type":"markdown","source":"#### Dropping empty Customer ID","metadata":{}},{"cell_type":"code","source":"retail = retail.dropna()\nretail.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:36.827484Z","iopub.execute_input":"2023-11-07T11:23:36.828505Z","iopub.status.idle":"2023-11-07T11:23:37.153042Z","shell.execute_reply.started":"2023-11-07T11:23:36.828465Z","shell.execute_reply":"2023-11-07T11:23:37.151839Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(824364, 8)"},"metadata":{}}]},{"cell_type":"markdown","source":"### Datatype Conversion\n\nChanging DataType of Customer ID as per Business requirement","metadata":{}},{"cell_type":"code","source":"retail['Customer ID'] = retail['Customer ID'].astype(str)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:37.982787Z","iopub.execute_input":"2023-11-07T11:23:37.983218Z","iopub.status.idle":"2023-11-07T11:23:38.432373Z","shell.execute_reply.started":"2023-11-07T11:23:37.983183Z","shell.execute_reply":"2023-11-07T11:23:38.431381Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"retail.dtypes","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:38.433953Z","iopub.execute_input":"2023-11-07T11:23:38.434825Z","iopub.status.idle":"2023-11-07T11:23:38.443721Z","shell.execute_reply.started":"2023-11-07T11:23:38.434786Z","shell.execute_reply":"2023-11-07T11:23:38.442404Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Invoice         object\nStockCode       object\nDescription     object\nQuantity         int64\nInvoiceDate     object\nPrice          float64\nCustomer ID     object\nCountry         object\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"### Removing invalid entries from columns\n\nPrice and Quantity must be positive values i.e. greater than 0)","metadata":{}},{"cell_type":"code","source":"(retail['Price']<=0).value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:39.181775Z","iopub.execute_input":"2023-11-07T11:23:39.182172Z","iopub.status.idle":"2023-11-07T11:23:39.199443Z","shell.execute_reply.started":"2023-11-07T11:23:39.182143Z","shell.execute_reply":"2023-11-07T11:23:39.197956Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"Price\nFalse    824293\nTrue         71\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"- There exists **invalid values** for Price column. **71 row entries** are less than or equal to 0**","metadata":{}},{"cell_type":"code","source":"retail.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:40.135671Z","iopub.execute_input":"2023-11-07T11:23:40.136108Z","iopub.status.idle":"2023-11-07T11:23:40.143275Z","shell.execute_reply.started":"2023-11-07T11:23:40.136074Z","shell.execute_reply":"2023-11-07T11:23:40.142184Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"(824364, 8)"},"metadata":{}}]},{"cell_type":"code","source":"retail = retail[retail['Price']>0]","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:40.563578Z","iopub.execute_input":"2023-11-07T11:23:40.564509Z","iopub.status.idle":"2023-11-07T11:23:40.693276Z","shell.execute_reply.started":"2023-11-07T11:23:40.564465Z","shell.execute_reply":"2023-11-07T11:23:40.692233Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"retail.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:41.011612Z","iopub.execute_input":"2023-11-07T11:23:41.012475Z","iopub.status.idle":"2023-11-07T11:23:41.019369Z","shell.execute_reply.started":"2023-11-07T11:23:41.012435Z","shell.execute_reply":"2023-11-07T11:23:41.01822Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(824293, 8)"},"metadata":{}}]},{"cell_type":"code","source":"(retail['Quantity']<=0).value_counts()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:41.466657Z","iopub.execute_input":"2023-11-07T11:23:41.467068Z","iopub.status.idle":"2023-11-07T11:23:41.483089Z","shell.execute_reply.started":"2023-11-07T11:23:41.467038Z","shell.execute_reply":"2023-11-07T11:23:41.482048Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"Quantity\nFalse    805549\nTrue      18744\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"There exists **invalid values** for Quantity column. **18744 row entries** are negative (less than 0). We need to drop these rows**","metadata":{}},{"cell_type":"code","source":"retail.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:42.567563Z","iopub.execute_input":"2023-11-07T11:23:42.567993Z","iopub.status.idle":"2023-11-07T11:23:42.576496Z","shell.execute_reply.started":"2023-11-07T11:23:42.56796Z","shell.execute_reply":"2023-11-07T11:23:42.575455Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"(824293, 8)"},"metadata":{}}]},{"cell_type":"code","source":"retail = retail[retail['Quantity']>=0]","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:42.997631Z","iopub.execute_input":"2023-11-07T11:23:42.998309Z","iopub.status.idle":"2023-11-07T11:23:43.116514Z","shell.execute_reply.started":"2023-11-07T11:23:42.998267Z","shell.execute_reply":"2023-11-07T11:23:43.115383Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"retail.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:43.488598Z","iopub.execute_input":"2023-11-07T11:23:43.489026Z","iopub.status.idle":"2023-11-07T11:23:43.495931Z","shell.execute_reply.started":"2023-11-07T11:23:43.48899Z","shell.execute_reply":"2023-11-07T11:23:43.494781Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"(805549, 8)"},"metadata":{}}]},{"cell_type":"code","source":"retail","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:43.929774Z","iopub.execute_input":"2023-11-07T11:23:43.93026Z","iopub.status.idle":"2023-11-07T11:23:43.949403Z","shell.execute_reply.started":"2023-11-07T11:23:43.930217Z","shell.execute_reply":"2023-11-07T11:23:43.948207Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"        Invoice StockCode                          Description  Quantity  \\\n0        489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n1        489434    79323P                   PINK CHERRY LIGHTS        12   \n2        489434    79323W                  WHITE CHERRY LIGHTS        12   \n3        489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n4        489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n...         ...       ...                                  ...       ...   \n1067366  581587     22899         CHILDREN'S APRON DOLLY GIRL          6   \n1067367  581587     23254        CHILDRENS CUTLERY DOLLY GIRL          4   \n1067368  581587     23255      CHILDRENS CUTLERY CIRCUS PARADE         4   \n1067369  581587     22138        BAKING SET 9 PIECE RETROSPOT          3   \n1067370  581587      POST                              POSTAGE         1   \n\n                 InvoiceDate  Price Customer ID         Country  \n0        2009-12-01 07:45:00   6.95     13085.0  United Kingdom  \n1        2009-12-01 07:45:00   6.75     13085.0  United Kingdom  \n2        2009-12-01 07:45:00   6.75     13085.0  United Kingdom  \n3        2009-12-01 07:45:00   2.10     13085.0  United Kingdom  \n4        2009-12-01 07:45:00   1.25     13085.0  United Kingdom  \n...                      ...    ...         ...             ...  \n1067366  2011-12-09 12:50:00   2.10     12680.0          France  \n1067367  2011-12-09 12:50:00   4.15     12680.0          France  \n1067368  2011-12-09 12:50:00   4.15     12680.0          France  \n1067369  2011-12-09 12:50:00   4.95     12680.0          France  \n1067370  2011-12-09 12:50:00  18.00     12680.0          France  \n\n[805549 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Invoice</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>Price</th>\n      <th>Customer ID</th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>489434</td>\n      <td>85048</td>\n      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.95</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>489434</td>\n      <td>79323P</td>\n      <td>PINK CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>489434</td>\n      <td>79323W</td>\n      <td>WHITE CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>489434</td>\n      <td>22041</td>\n      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n      <td>48</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>2.10</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>489434</td>\n      <td>21232</td>\n      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n      <td>24</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>1.25</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1067366</th>\n      <td>581587</td>\n      <td>22899</td>\n      <td>CHILDREN'S APRON DOLLY GIRL</td>\n      <td>6</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>2.10</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067367</th>\n      <td>581587</td>\n      <td>23254</td>\n      <td>CHILDRENS CUTLERY DOLLY GIRL</td>\n      <td>4</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>4.15</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067368</th>\n      <td>581587</td>\n      <td>23255</td>\n      <td>CHILDRENS CUTLERY CIRCUS PARADE</td>\n      <td>4</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>4.15</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067369</th>\n      <td>581587</td>\n      <td>22138</td>\n      <td>BAKING SET 9 PIECE RETROSPOT</td>\n      <td>3</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>4.95</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n    <tr>\n      <th>1067370</th>\n      <td>581587</td>\n      <td>POST</td>\n      <td>POSTAGE</td>\n      <td>1</td>\n      <td>2011-12-09 12:50:00</td>\n      <td>18.00</td>\n      <td>12680.0</td>\n      <td>France</td>\n    </tr>\n  </tbody>\n</table>\n<p>805549 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 6) RFM Metrics &  Scores Calculation\n---","metadata":{}},{"cell_type":"markdown","source":"### RFM Attribute Creation(Feature Engineering)\n\n- R (Recency): Number of days since last purchase\n- F (Frequency): Number of tracsactions\n- M (Monetary): Total amount of transactions (revenue contributed)","metadata":{}},{"cell_type":"markdown","source":"#### New Attribute Creation: Monetary","metadata":{}},{"cell_type":"code","source":"# New Attribute : Monetary\n\nretail['Amount'] = retail['Quantity']*retail['Price']\nretail.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:46.03565Z","iopub.execute_input":"2023-11-07T11:23:46.0369Z","iopub.status.idle":"2023-11-07T11:23:46.056202Z","shell.execute_reply.started":"2023-11-07T11:23:46.036852Z","shell.execute_reply":"2023-11-07T11:23:46.055159Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"  Invoice StockCode                          Description  Quantity  \\\n0  489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n1  489434    79323P                   PINK CHERRY LIGHTS        12   \n2  489434    79323W                  WHITE CHERRY LIGHTS        12   \n3  489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n4  489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n\n           InvoiceDate  Price Customer ID         Country  Amount  \n0  2009-12-01 07:45:00   6.95     13085.0  United Kingdom    83.4  \n1  2009-12-01 07:45:00   6.75     13085.0  United Kingdom    81.0  \n2  2009-12-01 07:45:00   6.75     13085.0  United Kingdom    81.0  \n3  2009-12-01 07:45:00   2.10     13085.0  United Kingdom   100.8  \n4  2009-12-01 07:45:00   1.25     13085.0  United Kingdom    30.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Invoice</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>Price</th>\n      <th>Customer ID</th>\n      <th>Country</th>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>489434</td>\n      <td>85048</td>\n      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.95</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>83.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>489434</td>\n      <td>79323P</td>\n      <td>PINK CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>81.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>489434</td>\n      <td>79323W</td>\n      <td>WHITE CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>81.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>489434</td>\n      <td>22041</td>\n      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n      <td>48</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>2.10</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>100.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>489434</td>\n      <td>21232</td>\n      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n      <td>24</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>1.25</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>30.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_m = retail.groupby('Customer ID')['Amount'].sum()\nrfm_m = rfm_m.reset_index()\nrfm_m.columns = ['Customer ID', 'Monetary']\nrfm_m.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:46.434721Z","iopub.execute_input":"2023-11-07T11:23:46.435121Z","iopub.status.idle":"2023-11-07T11:23:46.528003Z","shell.execute_reply.started":"2023-11-07T11:23:46.435091Z","shell.execute_reply":"2023-11-07T11:23:46.526783Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary\n0     12346.0  77556.46\n1     12347.0   5633.32\n2     12348.0   2019.40\n3     12349.0   4428.69\n4     12350.0    334.40","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### New Attribute Creation: Frequency","metadata":{}},{"cell_type":"code","source":"# New Attribute : Frequency\n\nrfm_f = retail.groupby('Customer ID')['Invoice'].count()\nrfm_f = rfm_f.reset_index()\nrfm_f.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:47.235984Z","iopub.execute_input":"2023-11-07T11:23:47.236367Z","iopub.status.idle":"2023-11-07T11:23:47.357258Z","shell.execute_reply.started":"2023-11-07T11:23:47.236341Z","shell.execute_reply":"2023-11-07T11:23:47.355892Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Invoice\n0     12346.0       34\n1     12347.0      253\n2     12348.0       51\n3     12349.0      175\n4     12350.0       17","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Invoice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>253</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>51</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>175</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>17</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_f.columns = ['Customer ID', 'Frequency']\nrfm_f.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:47.647833Z","iopub.execute_input":"2023-11-07T11:23:47.648236Z","iopub.status.idle":"2023-11-07T11:23:47.658661Z","shell.execute_reply.started":"2023-11-07T11:23:47.648204Z","shell.execute_reply":"2023-11-07T11:23:47.657362Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Frequency\n0     12346.0         34\n1     12347.0        253\n2     12348.0         51\n3     12349.0        175\n4     12350.0         17","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>253</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>51</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>175</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>17</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Merging the newly created dataframes together\n\nrfm = pd.merge(rfm_m, rfm_f, on='Customer ID', how='inner')\nrfm.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:48.004066Z","iopub.execute_input":"2023-11-07T11:23:48.004497Z","iopub.status.idle":"2023-11-07T11:23:48.02708Z","shell.execute_reply.started":"2023-11-07T11:23:48.004462Z","shell.execute_reply":"2023-11-07T11:23:48.02585Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency\n0     12346.0  77556.46         34\n1     12347.0   5633.32        253\n2     12348.0   2019.40         51\n3     12349.0   4428.69        175\n4     12350.0    334.40         17","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### New Attribute Creation: Recency","metadata":{}},{"cell_type":"code","source":"retail.dtypes","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:52.003576Z","iopub.execute_input":"2023-11-07T11:23:52.00406Z","iopub.status.idle":"2023-11-07T11:23:52.014048Z","shell.execute_reply.started":"2023-11-07T11:23:52.004012Z","shell.execute_reply":"2023-11-07T11:23:52.012847Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"Invoice         object\nStockCode       object\nDescription     object\nQuantity         int64\nInvoiceDate     object\nPrice          float64\nCustomer ID     object\nCountry         object\nAmount         float64\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"- InvoiceDate is not in datetime datatype. Here, need for DataType Conversion","metadata":{}},{"cell_type":"code","source":"retail['InvoiceDate'] = pd.to_datetime(retail['InvoiceDate'])","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:52.01628Z","iopub.execute_input":"2023-11-07T11:23:52.017026Z","iopub.status.idle":"2023-11-07T11:23:52.153135Z","shell.execute_reply.started":"2023-11-07T11:23:52.016983Z","shell.execute_reply":"2023-11-07T11:23:52.15206Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"retail.dtypes","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:52.154406Z","iopub.execute_input":"2023-11-07T11:23:52.155515Z","iopub.status.idle":"2023-11-07T11:23:52.165194Z","shell.execute_reply.started":"2023-11-07T11:23:52.155469Z","shell.execute_reply":"2023-11-07T11:23:52.163769Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"Invoice                object\nStockCode              object\nDescription            object\nQuantity                int64\nInvoiceDate    datetime64[ns]\nPrice                 float64\nCustomer ID            object\nCountry                object\nAmount                float64\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# Getting Data range\n\nmin_date = min(retail['InvoiceDate'])\nmax_date = max(retail['InvoiceDate'])\n\nprint(min_date,max_date)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:52.168298Z","iopub.execute_input":"2023-11-07T11:23:52.168786Z","iopub.status.idle":"2023-11-07T11:23:55.352615Z","shell.execute_reply.started":"2023-11-07T11:23:52.168728Z","shell.execute_reply":"2023-11-07T11:23:55.351529Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"2009-12-01 07:45:00 2011-12-09 12:50:00\n","output_type":"stream"}]},{"cell_type":"code","source":"# Compute the difference between max date and transaction date\n\nretail['Diff_Days'] = max_date - retail['InvoiceDate']\nretail.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.354151Z","iopub.execute_input":"2023-11-07T11:23:55.354485Z","iopub.status.idle":"2023-11-07T11:23:55.380563Z","shell.execute_reply.started":"2023-11-07T11:23:55.354458Z","shell.execute_reply":"2023-11-07T11:23:55.379434Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"  Invoice StockCode                          Description  Quantity  \\\n0  489434     85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n1  489434    79323P                   PINK CHERRY LIGHTS        12   \n2  489434    79323W                  WHITE CHERRY LIGHTS        12   \n3  489434     22041         RECORD FRAME 7\" SINGLE SIZE         48   \n4  489434     21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n\n          InvoiceDate  Price Customer ID         Country  Amount  \\\n0 2009-12-01 07:45:00   6.95     13085.0  United Kingdom    83.4   \n1 2009-12-01 07:45:00   6.75     13085.0  United Kingdom    81.0   \n2 2009-12-01 07:45:00   6.75     13085.0  United Kingdom    81.0   \n3 2009-12-01 07:45:00   2.10     13085.0  United Kingdom   100.8   \n4 2009-12-01 07:45:00   1.25     13085.0  United Kingdom    30.0   \n\n          Diff_Days  \n0 738 days 05:05:00  \n1 738 days 05:05:00  \n2 738 days 05:05:00  \n3 738 days 05:05:00  \n4 738 days 05:05:00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Invoice</th>\n      <th>StockCode</th>\n      <th>Description</th>\n      <th>Quantity</th>\n      <th>InvoiceDate</th>\n      <th>Price</th>\n      <th>Customer ID</th>\n      <th>Country</th>\n      <th>Amount</th>\n      <th>Diff_Days</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>489434</td>\n      <td>85048</td>\n      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.95</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>83.4</td>\n      <td>738 days 05:05:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>489434</td>\n      <td>79323P</td>\n      <td>PINK CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>81.0</td>\n      <td>738 days 05:05:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>489434</td>\n      <td>79323W</td>\n      <td>WHITE CHERRY LIGHTS</td>\n      <td>12</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>6.75</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>81.0</td>\n      <td>738 days 05:05:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>489434</td>\n      <td>22041</td>\n      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n      <td>48</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>2.10</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>100.8</td>\n      <td>738 days 05:05:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>489434</td>\n      <td>21232</td>\n      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n      <td>24</td>\n      <td>2009-12-01 07:45:00</td>\n      <td>1.25</td>\n      <td>13085.0</td>\n      <td>United Kingdom</td>\n      <td>30.0</td>\n      <td>738 days 05:05:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Compute last transaction date to get the recency of customers\n\nrfm_r = retail.groupby('Customer ID')['Diff_Days'].min()\nrfm_r = rfm_r.reset_index()\nrfm_r.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.381802Z","iopub.execute_input":"2023-11-07T11:23:55.382597Z","iopub.status.idle":"2023-11-07T11:23:55.473352Z","shell.execute_reply.started":"2023-11-07T11:23:55.382567Z","shell.execute_reply":"2023-11-07T11:23:55.472387Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"  Customer ID         Diff_Days\n0     12346.0 325 days 02:49:00\n1     12347.0   1 days 20:58:00\n2     12348.0  74 days 23:37:00\n3     12349.0  18 days 02:59:00\n4     12350.0 309 days 20:49:00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Diff_Days</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>325 days 02:49:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>1 days 20:58:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>74 days 23:37:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>18 days 02:59:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>309 days 20:49:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Extract number of days only\n\nrfm_r['Diff_Days'] = rfm_r['Diff_Days'].dt.days\nrfm_r.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.474545Z","iopub.execute_input":"2023-11-07T11:23:55.475061Z","iopub.status.idle":"2023-11-07T11:23:55.48583Z","shell.execute_reply.started":"2023-11-07T11:23:55.475032Z","shell.execute_reply":"2023-11-07T11:23:55.484475Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Diff_Days\n0     12346.0        325\n1     12347.0          1\n2     12348.0         74\n3     12349.0         18\n4     12350.0        309","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Diff_Days</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>309</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Merge all the newly created attribute to get the final RFM dataframe\n\nrfm = pd.merge(rfm,rfm_r, on='Customer ID', how='inner')\nrfm.columns = ['Customer ID', 'Monetary', 'Frequency', 'Recency']\nrfm.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.4873Z","iopub.execute_input":"2023-11-07T11:23:55.487692Z","iopub.status.idle":"2023-11-07T11:23:55.511431Z","shell.execute_reply.started":"2023-11-07T11:23:55.487629Z","shell.execute_reply":"2023-11-07T11:23:55.509977Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency\n0     12346.0  77556.46         34      325\n1     12347.0   5633.32        253        1\n2     12348.0   2019.40         51       74\n3     12349.0   4428.69        175       18\n4     12350.0    334.40         17      309","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm.describe().T","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.512627Z","iopub.execute_input":"2023-11-07T11:23:55.513328Z","iopub.status.idle":"2023-11-07T11:23:55.537857Z","shell.execute_reply.started":"2023-11-07T11:23:55.513296Z","shell.execute_reply":"2023-11-07T11:23:55.536792Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"            count         mean           std   min       25%      50%  \\\nMonetary   5878.0  3018.616737  14737.731040  2.95  348.7625  898.915   \nFrequency  5878.0   137.044743    353.818629  1.00   21.0000   53.000   \nRecency    5878.0   200.331916    209.338707  0.00   25.0000   95.000   \n\n               75%        max  \nMonetary   2307.09  608821.65  \nFrequency   142.00   12890.00  \nRecency     379.00     738.00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Monetary</th>\n      <td>5878.0</td>\n      <td>3018.616737</td>\n      <td>14737.731040</td>\n      <td>2.95</td>\n      <td>348.7625</td>\n      <td>898.915</td>\n      <td>2307.09</td>\n      <td>608821.65</td>\n    </tr>\n    <tr>\n      <th>Frequency</th>\n      <td>5878.0</td>\n      <td>137.044743</td>\n      <td>353.818629</td>\n      <td>1.00</td>\n      <td>21.0000</td>\n      <td>53.000</td>\n      <td>142.00</td>\n      <td>12890.00</td>\n    </tr>\n    <tr>\n      <th>Recency</th>\n      <td>5878.0</td>\n      <td>200.331916</td>\n      <td>209.338707</td>\n      <td>0.00</td>\n      <td>25.0000</td>\n      <td>95.000</td>\n      <td>379.00</td>\n      <td>738.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.540944Z","iopub.execute_input":"2023-11-07T11:23:55.541284Z","iopub.status.idle":"2023-11-07T11:23:55.54721Z","shell.execute_reply.started":"2023-11-07T11:23:55.541252Z","shell.execute_reply":"2023-11-07T11:23:55.54623Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"(5878, 4)"},"metadata":{}}]},{"cell_type":"markdown","source":"**`Note:`** There are 5878 unique count of customers.","metadata":{}},{"cell_type":"markdown","source":"### Calculating RFM Scores using RFM Metrics","metadata":{}},{"cell_type":"code","source":"rfm_scores = rfm.copy()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.548622Z","iopub.execute_input":"2023-11-07T11:23:55.548958Z","iopub.status.idle":"2023-11-07T11:23:55.55885Z","shell.execute_reply.started":"2023-11-07T11:23:55.548928Z","shell.execute_reply":"2023-11-07T11:23:55.557905Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"rfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.560209Z","iopub.execute_input":"2023-11-07T11:23:55.561218Z","iopub.status.idle":"2023-11-07T11:23:55.575955Z","shell.execute_reply.started":"2023-11-07T11:23:55.561186Z","shell.execute_reply":"2023-11-07T11:23:55.574844Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency\n0     12346.0  77556.46         34      325\n1     12347.0   5633.32        253        1\n2     12348.0   2019.40         51       74\n3     12349.0   4428.69        175       18\n4     12350.0    334.40         17      309","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"For each RFM dimension, score can be calculated in several ways: \n\n- 1.Percentiles e.g. quantiles\n\n- 2.Pareto 80/20 cut\n\n- 3.Custom based on business knowledge\n\nWe are going to implement **percentile-based grouping** for each RFM dimension. Later combined label is created using these each RFM dimension.\n\n\n### Process of calculating percentiles:\n\n- Sort customers based on that metric\n- Break customers into a pre-defined number of groups of equal size\n- Assign a label to each group\n\n### Individual RFM dimension label\n\nFor each RFM dimension, assign labels to the categories based on the behavior we want to capture. These labels should be intuitive and provide insight into customer behavior. Here's an example for each dimension:\n\n   - **Recency (R):**\n     - Label 5: \"Very Recent\"\n     - Label 4: \"Recent\"\n     - Label 3: \"Moderate\"\n     - Label 2: \"Infrequent\"\n     - Label 1: \"Very Infrequent\"\n\n   - **Frequency (F):**\n     - Label 5: \"Very Frequent\"\n     - Label 4: \"Frequent\"\n     - Label 3: \"Moderate\"\n     - Label 2: \"Infrequent\"\n     - Label 1: \"Very Infrequent\"\n\n   - **Monetary (M):**\n     - Label 5: \"High Spending\"\n     - Label 4: \"Above Average Spending\"\n     - Label 3: \"Average Spending\"\n     - Label 2: \"Below Average Spending\"\n     - Label 1: \"Low Spending\"\n\n### Combined RFM Labels\n\nOnce we have assigned labels to the categories for each RFM dimension, you can create a **combined RFM label** for each customer by **concatenating the individual dimension labels** or by **adding individual dimension scores**. For example:\n   \n   - If a customer has **R=4, F=5, and M=3**, their combined RFM label would be **\"Recent-Very Frequent-Average Spending.\"**\n\n\n- We will rate **Recency** customer who have been active more recently better than the less recent customer,because each company wants its customers to be recent\n\n- We will rate **Frequency** and **Monetary Value** higher label because we want Customer to spend more money and visit more often (that is different order than recency).","metadata":{}},{"cell_type":"markdown","source":"### Creating Individual RFM Dimension label","metadata":{}},{"cell_type":"code","source":"#Date from customer's last purchase.The nearest date gets 5 and the furthest date gets 1.\nrfm_scores['Recency_Score'] = pd.qcut(rfm_scores['Recency'],5,labels=[5,4,3,2,1])\n# Total number of purchases.The least frequency gets 1 and the maximum frequency gets 5.\nrfm_scores['Frequency_Score'] = pd.qcut(rfm_scores['Frequency'].rank(method='first'),5,labels=[1,2,3,4,5])\n#Total spend by the customer.The least money gets 1, the most money gets 5.\nrfm_scores['Monetary_Score'] = pd.qcut(rfm_scores['Monetary'],5,labels=[1,2,3,4,5])","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.577175Z","iopub.execute_input":"2023-11-07T11:23:55.577966Z","iopub.status.idle":"2023-11-07T11:23:55.593451Z","shell.execute_reply.started":"2023-11-07T11:23:55.57793Z","shell.execute_reply":"2023-11-07T11:23:55.592252Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"rfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:55.594687Z","iopub.execute_input":"2023-11-07T11:23:55.595233Z","iopub.status.idle":"2023-11-07T11:23:55.610074Z","shell.execute_reply.started":"2023-11-07T11:23:55.5952Z","shell.execute_reply":"2023-11-07T11:23:55.60866Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0     12346.0  77556.46         34      325             2               2   \n1     12347.0   5633.32        253        1             5               5   \n2     12348.0   2019.40         51       74             3               3   \n3     12349.0   4428.69        175       18             5               4   \n4     12350.0    334.40         17      309             2               2   \n\n  Monetary_Score  \n0              5  \n1              5  \n2              4  \n3              5  \n4              2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"- **`Best Recency score = 5:` most recently purchase.** \n- **`Best Frequency score = 5:` most number of purchase.**\n- **`Best Monetary score = 5:` spent the most.**","metadata":{}},{"cell_type":"markdown","source":"### Creating Combined RFM Label","metadata":{}},{"cell_type":"markdown","source":"#### Method-1:  By concatenating the individual dimension labels","metadata":{}},{"cell_type":"code","source":"rfm_scores['RFM_Score_Segment'] = (rfm_scores['Recency_Score'].astype(str)+rfm_scores['Frequency_Score'].astype(str)+rfm_scores['Monetary_Score'].astype(str))","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:57.851635Z","iopub.execute_input":"2023-11-07T11:23:57.852079Z","iopub.status.idle":"2023-11-07T11:23:57.865329Z","shell.execute_reply.started":"2023-11-07T11:23:57.852047Z","shell.execute_reply":"2023-11-07T11:23:57.864162Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"rfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:58.188525Z","iopub.execute_input":"2023-11-07T11:23:58.18892Z","iopub.status.idle":"2023-11-07T11:23:58.204907Z","shell.execute_reply.started":"2023-11-07T11:23:58.18889Z","shell.execute_reply":"2023-11-07T11:23:58.203776Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0     12346.0  77556.46         34      325             2               2   \n1     12347.0   5633.32        253        1             5               5   \n2     12348.0   2019.40         51       74             3               3   \n3     12349.0   4428.69        175       18             5               4   \n4     12350.0    334.40         17      309             2               2   \n\n  Monetary_Score RFM_Score_Segment  \n0              5               225  \n1              5               555  \n2              4               334  \n3              5               545  \n4              2               222  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n      <th>RFM_Score_Segment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>225</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>334</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>545</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>222</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Method-2:  By adding individual dimension label scores","metadata":{}},{"cell_type":"code","source":"rfm_scores['RFM_Score_Sum'] = rfm_scores[['Recency_Score','Frequency_Score','Monetary_Score']].sum(axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:58.790605Z","iopub.execute_input":"2023-11-07T11:23:58.791204Z","iopub.status.idle":"2023-11-07T11:23:58.800111Z","shell.execute_reply.started":"2023-11-07T11:23:58.791173Z","shell.execute_reply":"2023-11-07T11:23:58.798906Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"rfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:23:59.069666Z","iopub.execute_input":"2023-11-07T11:23:59.07006Z","iopub.status.idle":"2023-11-07T11:23:59.08502Z","shell.execute_reply.started":"2023-11-07T11:23:59.070031Z","shell.execute_reply":"2023-11-07T11:23:59.084139Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0     12346.0  77556.46         34      325             2               2   \n1     12347.0   5633.32        253        1             5               5   \n2     12348.0   2019.40         51       74             3               3   \n3     12349.0   4428.69        175       18             5               4   \n4     12350.0    334.40         17      309             2               2   \n\n  Monetary_Score RFM_Score_Segment  RFM_Score_Sum  \n0              5               225              9  \n1              5               555             15  \n2              4               334             10  \n3              5               545             14  \n4              2               222              6  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n      <th>RFM_Score_Segment</th>\n      <th>RFM_Score_Sum</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>225</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>334</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>545</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>222</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### `Note:`\n- Adding individual dimension score( eg. 5+1+1) will create a score  between 3 and 15. Here each of the scores got same importance whether its **413 & 431**. However both **413 & 431** represent different segment.","metadata":{}},{"cell_type":"markdown","source":"## 7) Segmenting Customers based on RFM Scores \n#### (Manual Approach - Without Model Building)\n---","metadata":{}},{"cell_type":"markdown","source":"### Method-1: Interpeting Customer Segmentation using RFM_Score_Sum","metadata":{}},{"cell_type":"code","source":"rfm_scores.groupby(['RFM_Score_Sum']).agg({'Recency': 'mean',\n                                           'Frequency': 'mean',\n                                           'Monetary': ['mean', 'count']}).round(1)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:00.250228Z","iopub.execute_input":"2023-11-07T11:24:00.250646Z","iopub.status.idle":"2023-11-07T11:24:00.272591Z","shell.execute_reply.started":"2023-11-07T11:24:00.25061Z","shell.execute_reply":"2023-11-07T11:24:00.271272Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"              Recency Frequency Monetary      \n                 mean      mean     mean count\nRFM_Score_Sum                                 \n3               569.1       7.6    141.7   353\n4               444.9      13.2    204.4   402\n5               372.3      19.8    323.7   494\n6               282.7      24.8    421.3   500\n7               248.4      33.7    717.4   493\n8               210.9      48.4    946.7   481\n9               163.4      61.9   1427.8   514\n10              136.2      82.3   1413.2   436\n11               91.0     109.3   2507.6   486\n12               69.6     170.3   2982.0   452\n13               39.7     221.7   3927.4   427\n14               23.8     351.6   7261.4   411\n15                6.7     695.7  18306.8   429","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Recency</th>\n      <th>Frequency</th>\n      <th colspan=\"2\" halign=\"left\">Monetary</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>count</th>\n    </tr>\n    <tr>\n      <th>RFM_Score_Sum</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>569.1</td>\n      <td>7.6</td>\n      <td>141.7</td>\n      <td>353</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>444.9</td>\n      <td>13.2</td>\n      <td>204.4</td>\n      <td>402</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>372.3</td>\n      <td>19.8</td>\n      <td>323.7</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>282.7</td>\n      <td>24.8</td>\n      <td>421.3</td>\n      <td>500</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>248.4</td>\n      <td>33.7</td>\n      <td>717.4</td>\n      <td>493</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>210.9</td>\n      <td>48.4</td>\n      <td>946.7</td>\n      <td>481</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>163.4</td>\n      <td>61.9</td>\n      <td>1427.8</td>\n      <td>514</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>136.2</td>\n      <td>82.3</td>\n      <td>1413.2</td>\n      <td>436</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>91.0</td>\n      <td>109.3</td>\n      <td>2507.6</td>\n      <td>486</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>69.6</td>\n      <td>170.3</td>\n      <td>2982.0</td>\n      <td>452</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>39.7</td>\n      <td>221.7</td>\n      <td>3927.4</td>\n      <td>427</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>23.8</td>\n      <td>351.6</td>\n      <td>7261.4</td>\n      <td>411</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>6.7</td>\n      <td>695.7</td>\n      <td>18306.8</td>\n      <td>429</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Use RFM_Score_Sum to group customers into Gold, Silver and Bronze segments","metadata":{}},{"cell_type":"code","source":"def segments(df):\n    if df['RFM_Score_Sum'] > 9 :\n        return 'Gold'\n    elif (df['RFM_Score_Sum'] > 5) and (df['RFM_Score_Sum'] <= 9 ):\n        return 'Sliver'\n    else:  \n        return 'Bronze'","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:00.799064Z","iopub.execute_input":"2023-11-07T11:24:00.800192Z","iopub.status.idle":"2023-11-07T11:24:00.805684Z","shell.execute_reply.started":"2023-11-07T11:24:00.800152Z","shell.execute_reply":"2023-11-07T11:24:00.804501Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"rfm_scores['Segment Name'] = rfm_scores.apply(segments,axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:01.070766Z","iopub.execute_input":"2023-11-07T11:24:01.071434Z","iopub.status.idle":"2023-11-07T11:24:01.136552Z","shell.execute_reply.started":"2023-11-07T11:24:01.07139Z","shell.execute_reply":"2023-11-07T11:24:01.135302Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"rfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:01.35671Z","iopub.execute_input":"2023-11-07T11:24:01.35714Z","iopub.status.idle":"2023-11-07T11:24:01.374592Z","shell.execute_reply.started":"2023-11-07T11:24:01.357105Z","shell.execute_reply":"2023-11-07T11:24:01.373462Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0     12346.0  77556.46         34      325             2               2   \n1     12347.0   5633.32        253        1             5               5   \n2     12348.0   2019.40         51       74             3               3   \n3     12349.0   4428.69        175       18             5               4   \n4     12350.0    334.40         17      309             2               2   \n\n  Monetary_Score RFM_Score_Segment  RFM_Score_Sum Segment Name  \n0              5               225              9       Sliver  \n1              5               555             15         Gold  \n2              4               334             10         Gold  \n3              5               545             14         Gold  \n4              2               222              6       Sliver  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n      <th>RFM_Score_Segment</th>\n      <th>RFM_Score_Sum</th>\n      <th>Segment Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>225</td>\n      <td>9</td>\n      <td>Sliver</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>15</td>\n      <td>Gold</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>334</td>\n      <td>10</td>\n      <td>Gold</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>545</td>\n      <td>14</td>\n      <td>Gold</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>222</td>\n      <td>6</td>\n      <td>Sliver</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_scores.groupby(['Segment Name']).agg({'Recency':'mean',\n                                         'Frequency':'mean',\n                                         'Monetary':['mean','count']}).round(1).sort_values(by=('Monetary','count'), \n                                                                                            ascending=False)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:01.624165Z","iopub.execute_input":"2023-11-07T11:24:01.624571Z","iopub.status.idle":"2023-11-07T11:24:01.645442Z","shell.execute_reply.started":"2023-11-07T11:24:01.624536Z","shell.execute_reply":"2023-11-07T11:24:01.644226Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"             Recency Frequency Monetary      \n                mean      mean     mean count\nSegment Name                                 \nGold            62.3     266.4   5943.9  2641\nSliver         226.0      42.3    882.1  1988\nBronze         451.3      14.2    233.8  1249","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Recency</th>\n      <th>Frequency</th>\n      <th colspan=\"2\" halign=\"left\">Monetary</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>count</th>\n    </tr>\n    <tr>\n      <th>Segment Name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Gold</th>\n      <td>62.3</td>\n      <td>266.4</td>\n      <td>5943.9</td>\n      <td>2641</td>\n    </tr>\n    <tr>\n      <th>Sliver</th>\n      <td>226.0</td>\n      <td>42.3</td>\n      <td>882.1</td>\n      <td>1988</td>\n    </tr>\n    <tr>\n      <th>Bronze</th>\n      <td>451.3</td>\n      <td>14.2</td>\n      <td>233.8</td>\n      <td>1249</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\n\n- **Gold Customers:** 2643\n- **Silver Customers:** 1992\n- **Bronze Customers:** 1246","metadata":{}},{"cell_type":"markdown","source":"### Method-2: Interpeting Customer Segmentation using RFM_Score_Segment","metadata":{}},{"cell_type":"markdown","source":"### Based on Recency & Frequency Score\n- **can't loose them →** A class of customers who used to shop very frequently but have not shopped for a long time and should not be lost.\n- **at risk →** A class of customers who shop relatively frequently but have not shopped for a long time. \n- **hibernating →** Customers who are literally asleep, both shopped infrequently and have not shopped for a long time.\n- **about to sleep →** A class of customers who do not shop frequently and have not shopped for some time; they are heading towards sleep.\n- **need attention →** This is the class of customers in the middle of the RF graph (33%), moving towards the risky group if not addressed.\n- **new customers →** A class of customers who have not shopped frequently (maybe once) and have been shopping for a short period of time, they are considered as new customers.\n- **promising →** New customers are the aged version of new customers :) they are customers who have not shopped frequently and have shopped for a short period of time.\n- **potential loyalists →** Customers who shop moderately often and it has not been long since their last purchase.\n- **loyal customers →** Customers who shop very often and it has been a short time since their last purchase.\n- **champions →** They are our champions, our crown jewels! Customers who shop very often and have made their last purchase within a very short period of time.\n\n![image.png](https://raw.githubusercontent.com/manishkr1754/Online_Retail_Customer_Segmentation_RFM_Analysis/main/rfm_label.png)","metadata":{}},{"cell_type":"code","source":"# Display the top 10 segments with the most customers\nrfm_scores.groupby(['RFM_Score_Segment']).size().sort_values(ascending=False)[:10]","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:02.759702Z","iopub.execute_input":"2023-11-07T11:24:02.76011Z","iopub.status.idle":"2023-11-07T11:24:02.772184Z","shell.execute_reply.started":"2023-11-07T11:24:02.760079Z","shell.execute_reply":"2023-11-07T11:24:02.770815Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"RFM_Score_Segment\n555    429\n111    353\n455    248\n211    198\n122    177\n222    163\n344    160\n444    150\n333    144\n233    141\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Mapping Segment as per Recency and Frequency Score (Keeping Monetary Unchanged)","metadata":{}},{"cell_type":"code","source":"segment_mapping = {r'[1-2][1-2][1-5]': 'Hibernating',\n                   r'[1-2][3-4][1-5]': 'At Risk',\n                   r'[1-2][5][1-5]': 'Can\\'t Loose',\n                   r'[3][1-2][1-5]': 'About to Sleep',\n                   r'[3][3][1-5]': 'Need Attention',\n                   r'[3-4][4-5][1-5]': 'Loyal Customers',\n                   r'[4][1][1-5]': 'Promising',\n                   r'[5][1][1-5]': 'New Customers',\n                   r'[4-5][2-3][1-5]': 'Potential Loyalists',\n                   r'[5][4-5][1-5]': 'Champions'\n                  }","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:03.324596Z","iopub.execute_input":"2023-11-07T11:24:03.324992Z","iopub.status.idle":"2023-11-07T11:24:03.331286Z","shell.execute_reply.started":"2023-11-07T11:24:03.324954Z","shell.execute_reply":"2023-11-07T11:24:03.329775Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"rfm_scores['Segment'] = rfm_scores['RFM_Score_Segment'].replace(segment_mapping,regex=True)\n#rfm_scores.reset_index(inplace=True)\nrfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:03.591607Z","iopub.execute_input":"2023-11-07T11:24:03.592011Z","iopub.status.idle":"2023-11-07T11:24:03.699927Z","shell.execute_reply.started":"2023-11-07T11:24:03.591981Z","shell.execute_reply":"2023-11-07T11:24:03.698813Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0     12346.0  77556.46         34      325             2               2   \n1     12347.0   5633.32        253        1             5               5   \n2     12348.0   2019.40         51       74             3               3   \n3     12349.0   4428.69        175       18             5               4   \n4     12350.0    334.40         17      309             2               2   \n\n  Monetary_Score RFM_Score_Segment  RFM_Score_Sum Segment Name         Segment  \n0              5               225              9       Sliver     Hibernating  \n1              5               555             15         Gold       Champions  \n2              4               334             10         Gold  Need Attention  \n3              5               545             14         Gold       Champions  \n4              2               222              6       Sliver     Hibernating  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n      <th>RFM_Score_Segment</th>\n      <th>RFM_Score_Sum</th>\n      <th>Segment Name</th>\n      <th>Segment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>225</td>\n      <td>9</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>15</td>\n      <td>Gold</td>\n      <td>Champions</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>334</td>\n      <td>10</td>\n      <td>Gold</td>\n      <td>Need Attention</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>545</td>\n      <td>14</td>\n      <td>Gold</td>\n      <td>Champions</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>222</td>\n      <td>6</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_scores.groupby(['Segment']).agg({\"Customer ID\":\"count\"}).sort_values(\"Customer ID\",ascending=False)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:03.850817Z","iopub.execute_input":"2023-11-07T11:24:03.851221Z","iopub.status.idle":"2023-11-07T11:24:03.866416Z","shell.execute_reply.started":"2023-11-07T11:24:03.85119Z","shell.execute_reply":"2023-11-07T11:24:03.865062Z"},"trusted":true},"execution_count":53,"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"                     Customer ID\nSegment                         \nHibernating                 1437\nLoyal Customers             1135\nChampions                    821\nAt Risk                      802\nPotential Loyalists          676\nAbout to Sleep               428\nNeed Attention               270\nPromising                    125\nCan't Loose                  108\nNew Customers                 76","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n    </tr>\n    <tr>\n      <th>Segment</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Hibernating</th>\n      <td>1437</td>\n    </tr>\n    <tr>\n      <th>Loyal Customers</th>\n      <td>1135</td>\n    </tr>\n    <tr>\n      <th>Champions</th>\n      <td>821</td>\n    </tr>\n    <tr>\n      <th>At Risk</th>\n      <td>802</td>\n    </tr>\n    <tr>\n      <th>Potential Loyalists</th>\n      <td>676</td>\n    </tr>\n    <tr>\n      <th>About to Sleep</th>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th>Need Attention</th>\n      <td>270</td>\n    </tr>\n    <tr>\n      <th>Promising</th>\n      <td>125</td>\n    </tr>\n    <tr>\n      <th>Can't Loose</th>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>New Customers</th>\n      <td>76</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_scores[[\"Segment\", \"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"Segment\").agg([\"mean\",\"count\",\"max\"]).round()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:04.151237Z","iopub.execute_input":"2023-11-07T11:24:04.152485Z","iopub.status.idle":"2023-11-07T11:24:04.185974Z","shell.execute_reply.started":"2023-11-07T11:24:04.152433Z","shell.execute_reply":"2023-11-07T11:24:04.184788Z"},"trusted":true},"execution_count":54,"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"                    Recency            Frequency              Monetary        \\\n                       mean count  max      mean count    max     mean count   \nSegment                                                                        \nAbout to Sleep        109.0   428  188      18.0   428     37    670.0   428   \nAt Risk               394.0   802  737      74.0   802    178   1315.0   802   \nCan't Loose           346.0   108  623     325.0   108   2796   4651.0   108   \nChampions               8.0   821   18     449.0   821  12890  10934.0   821   \nHibernating           451.0  1437  738      16.0  1437     37    518.0  1437   \nLoyal Customers        64.0  1135  188     234.0  1135   1874   4165.0  1135   \nNeed Attention        107.0   270  187      55.0   270     76   1403.0   270   \nNew Customers           9.0    76   18       9.0    76     16   2927.0    76   \nPotential Loyalists    25.0   676   58      44.0   676     76   1184.0   676   \nPromising              37.0   125   58       9.0   125     16    395.0   125   \n\n                               \n                          max  \nSegment                        \nAbout to Sleep        39916.0  \nAt Risk               67502.0  \nCan't Loose           56600.0  \nChampions            608822.0  \nHibernating           77556.0  \nLoyal Customers      144458.0  \nNeed Attention        16246.0  \nNew Customers        168472.0  \nPotential Loyalists   30393.0  \nPromising              5120.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">Recency</th>\n      <th colspan=\"3\" halign=\"left\">Frequency</th>\n      <th colspan=\"3\" halign=\"left\">Monetary</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>count</th>\n      <th>max</th>\n      <th>mean</th>\n      <th>count</th>\n      <th>max</th>\n      <th>mean</th>\n      <th>count</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>Segment</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>About to Sleep</th>\n      <td>109.0</td>\n      <td>428</td>\n      <td>188</td>\n      <td>18.0</td>\n      <td>428</td>\n      <td>37</td>\n      <td>670.0</td>\n      <td>428</td>\n      <td>39916.0</td>\n    </tr>\n    <tr>\n      <th>At Risk</th>\n      <td>394.0</td>\n      <td>802</td>\n      <td>737</td>\n      <td>74.0</td>\n      <td>802</td>\n      <td>178</td>\n      <td>1315.0</td>\n      <td>802</td>\n      <td>67502.0</td>\n    </tr>\n    <tr>\n      <th>Can't Loose</th>\n      <td>346.0</td>\n      <td>108</td>\n      <td>623</td>\n      <td>325.0</td>\n      <td>108</td>\n      <td>2796</td>\n      <td>4651.0</td>\n      <td>108</td>\n      <td>56600.0</td>\n    </tr>\n    <tr>\n      <th>Champions</th>\n      <td>8.0</td>\n      <td>821</td>\n      <td>18</td>\n      <td>449.0</td>\n      <td>821</td>\n      <td>12890</td>\n      <td>10934.0</td>\n      <td>821</td>\n      <td>608822.0</td>\n    </tr>\n    <tr>\n      <th>Hibernating</th>\n      <td>451.0</td>\n      <td>1437</td>\n      <td>738</td>\n      <td>16.0</td>\n      <td>1437</td>\n      <td>37</td>\n      <td>518.0</td>\n      <td>1437</td>\n      <td>77556.0</td>\n    </tr>\n    <tr>\n      <th>Loyal Customers</th>\n      <td>64.0</td>\n      <td>1135</td>\n      <td>188</td>\n      <td>234.0</td>\n      <td>1135</td>\n      <td>1874</td>\n      <td>4165.0</td>\n      <td>1135</td>\n      <td>144458.0</td>\n    </tr>\n    <tr>\n      <th>Need Attention</th>\n      <td>107.0</td>\n      <td>270</td>\n      <td>187</td>\n      <td>55.0</td>\n      <td>270</td>\n      <td>76</td>\n      <td>1403.0</td>\n      <td>270</td>\n      <td>16246.0</td>\n    </tr>\n    <tr>\n      <th>New Customers</th>\n      <td>9.0</td>\n      <td>76</td>\n      <td>18</td>\n      <td>9.0</td>\n      <td>76</td>\n      <td>16</td>\n      <td>2927.0</td>\n      <td>76</td>\n      <td>168472.0</td>\n    </tr>\n    <tr>\n      <th>Potential Loyalists</th>\n      <td>25.0</td>\n      <td>676</td>\n      <td>58</td>\n      <td>44.0</td>\n      <td>676</td>\n      <td>76</td>\n      <td>1184.0</td>\n      <td>676</td>\n      <td>30393.0</td>\n    </tr>\n    <tr>\n      <th>Promising</th>\n      <td>37.0</td>\n      <td>125</td>\n      <td>58</td>\n      <td>9.0</td>\n      <td>125</td>\n      <td>16</td>\n      <td>395.0</td>\n      <td>125</td>\n      <td>5120.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\n\n- **About to Sleep:** 428\n- **At Risk:** 802\n- **Can't Loose:** 108\n- **Champions:** 821\n- **Hibernating:** 1439\n- **Loyal Customers:** 1135\n- **Need Attention:** 270\n- **New Customers:** 77\n- **Potential Loyalists:** 677\n- **Promising:** 124","metadata":{}},{"cell_type":"markdown","source":"### Method-3: Interpeting Customer Segmentation using RFM_Score_Segment","metadata":{}},{"cell_type":"markdown","source":"### Based on all three RFM dimension (Recency, Frequency & Monetary)\n\n**Below image shows the inverse scoring. We need to 1 against 5 and 5 against 1**\n![image.jpg](https://raw.githubusercontent.com/manishkr1754/Online_Retail_Customer_Segmentation_RFM_Analysis/main/rfm_label_2.JPG)","metadata":{}},{"cell_type":"markdown","source":"#### Mapping Segment as per all three RFM dimension","metadata":{}},{"cell_type":"code","source":"segment_mapping = {r'[4-5][4-5][4-5]': 'Best Customers',\n                   r'[1-5][4-5][1-5]': 'Loyal Customers',\n                   r'[1-5][1-5][4-5]': 'Big Spenders',\n                   r'[2-3][1-5][1-5]': 'Almost Lost',\n                   r'[1][1-5][1-5]': 'Lost Customers',\n                   r'[4-5][1-3][1-3]': 'Recent Active Low Spender',\n                  }","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:05.642343Z","iopub.execute_input":"2023-11-07T11:24:05.6428Z","iopub.status.idle":"2023-11-07T11:24:05.648056Z","shell.execute_reply.started":"2023-11-07T11:24:05.642763Z","shell.execute_reply":"2023-11-07T11:24:05.647014Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"rfm_scores['Segment_New'] = rfm_scores['RFM_Score_Segment'].replace(segment_mapping,regex=True)\n#rfm_scores.reset_index(inplace=True)\nrfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:05.907762Z","iopub.execute_input":"2023-11-07T11:24:05.908836Z","iopub.status.idle":"2023-11-07T11:24:05.991949Z","shell.execute_reply.started":"2023-11-07T11:24:05.908798Z","shell.execute_reply":"2023-11-07T11:24:05.990637Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0     12346.0  77556.46         34      325             2               2   \n1     12347.0   5633.32        253        1             5               5   \n2     12348.0   2019.40         51       74             3               3   \n3     12349.0   4428.69        175       18             5               4   \n4     12350.0    334.40         17      309             2               2   \n\n  Monetary_Score RFM_Score_Segment  RFM_Score_Sum Segment Name  \\\n0              5               225              9       Sliver   \n1              5               555             15         Gold   \n2              4               334             10         Gold   \n3              5               545             14         Gold   \n4              2               222              6       Sliver   \n\n          Segment     Segment_New  \n0     Hibernating    Big Spenders  \n1       Champions  Best Customers  \n2  Need Attention    Big Spenders  \n3       Champions  Best Customers  \n4     Hibernating     Almost Lost  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n      <th>RFM_Score_Segment</th>\n      <th>RFM_Score_Sum</th>\n      <th>Segment Name</th>\n      <th>Segment</th>\n      <th>Segment_New</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>225</td>\n      <td>9</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n      <td>Big Spenders</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>15</td>\n      <td>Gold</td>\n      <td>Champions</td>\n      <td>Best Customers</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>334</td>\n      <td>10</td>\n      <td>Gold</td>\n      <td>Need Attention</td>\n      <td>Big Spenders</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>545</td>\n      <td>14</td>\n      <td>Gold</td>\n      <td>Champions</td>\n      <td>Best Customers</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>222</td>\n      <td>6</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n      <td>Almost Lost</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_scores.groupby(['Segment_New']).agg({\"Customer ID\":\"count\"}).sort_values(\"Customer ID\",ascending=False)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:06.196855Z","iopub.execute_input":"2023-11-07T11:24:06.197291Z","iopub.status.idle":"2023-11-07T11:24:06.212881Z","shell.execute_reply.started":"2023-11-07T11:24:06.19726Z","shell.execute_reply":"2023-11-07T11:24:06.211559Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"                           Customer ID\nSegment_New                           \nAlmost Lost                       1384\nBest Customers                    1273\nLoyal Customers                   1078\nLost Customers                     990\nRecent Active Low Spender          713\nBig Spenders                       440","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n    </tr>\n    <tr>\n      <th>Segment_New</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Almost Lost</th>\n      <td>1384</td>\n    </tr>\n    <tr>\n      <th>Best Customers</th>\n      <td>1273</td>\n    </tr>\n    <tr>\n      <th>Loyal Customers</th>\n      <td>1078</td>\n    </tr>\n    <tr>\n      <th>Lost Customers</th>\n      <td>990</td>\n    </tr>\n    <tr>\n      <th>Recent Active Low Spender</th>\n      <td>713</td>\n    </tr>\n    <tr>\n      <th>Big Spenders</th>\n      <td>440</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\n\t\n- **Almost Lost:**\t1397\n- **Best Customers:**\t1273\n- **Loyal Customers:**\t1079\n- **Lost Customers:**\t977\n- **Recent Active Low Spender:**\t714\n- **Big Spenders:**\t441","metadata":{}},{"cell_type":"markdown","source":"## Model I : K-Means Clustering\n---\nK-Means clustering is a popular **unsupervised machine learning algorithm** used for clustering data points into groups or clusters. In order to apply K-Means, we must check if the key assumptions of K-Means Clustering are followed.\n\n### Key Assumptions of K-Means\n\n1. **Symmetric Distribution of Variables (Not Skewed):** K-Means assumes that the variables have a **roughly symmetric distribution and are not heavily skewed**. This is because K-Means uses the mean (centroid) of data points within a cluster to define the cluster center. If the data is highly skewed with a long tail on one side, the mean may not be a representative measure of central tendency and K-Means may not perform well. In such cases, you may need to consider data transformation techniques to make the data more symmetric.\n\n2. **Variables with Same Average Values:** K-Means assumes that the variables have **similar means**. If the variables have significantly different average values, it can lead to unequal contributions of variables to the distance calculation between data points which can impact the clustering results. **Standardizing or scaling** the variables (e.g. using z-score normalization) can help address this issue by giving all variables equal importance.\n\n3. **Variables with Same Variance:** K-Means also assumes that the variables have **roughly equal variances**. Variables with different variances can disproportionately affect the distance calculations because K-Means uses the Euclidean distance metric which is sensitive to the scale of the variables. Again, standardizing or scaling the variables can help mitigate this problem.\n\n### What if Assumptions are not followed\nIn practice, data rarely perfectly satisfies these assumptions and K-Means can still be applied with some caution. However, when these assumptions are strongly violated, itx is advisable to consider **alternative clustering algorithms** or **preprocessing techniques** such as:\n\n- Using data transformation methods like **log-transform** for skewed data.\n- **Normalizing or standardizing** the data to make variables have the same scale.\n- Using **different distance metrics** that can handle differences in variance.\n- Exploring other clustering algorithms like **DBSCAN or hierarchical clustering** that are less sensitive to these assumptions.","metadata":{}},{"cell_type":"code","source":"rfm.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:07.097999Z","iopub.execute_input":"2023-11-07T11:24:07.098813Z","iopub.status.idle":"2023-11-07T11:24:07.112299Z","shell.execute_reply.started":"2023-11-07T11:24:07.098761Z","shell.execute_reply":"2023-11-07T11:24:07.111016Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency\n0     12346.0  77556.46         34      325\n1     12347.0   5633.32        253        1\n2     12348.0   2019.40         51       74\n3     12349.0   4428.69        175       18\n4     12350.0    334.40         17      309","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Checking for Mean and Variance Assumption","metadata":{}},{"cell_type":"code","source":"rfm.describe()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:07.676022Z","iopub.execute_input":"2023-11-07T11:24:07.676406Z","iopub.status.idle":"2023-11-07T11:24:07.698613Z","shell.execute_reply.started":"2023-11-07T11:24:07.676376Z","shell.execute_reply":"2023-11-07T11:24:07.697242Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"            Monetary     Frequency      Recency\ncount    5878.000000   5878.000000  5878.000000\nmean     3018.616737    137.044743   200.331916\nstd     14737.731040    353.818629   209.338707\nmin         2.950000      1.000000     0.000000\n25%       348.762500     21.000000    25.000000\n50%       898.915000     53.000000    95.000000\n75%      2307.090000    142.000000   379.000000\nmax    608821.650000  12890.000000   738.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5878.000000</td>\n      <td>5878.000000</td>\n      <td>5878.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3018.616737</td>\n      <td>137.044743</td>\n      <td>200.331916</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>14737.731040</td>\n      <td>353.818629</td>\n      <td>209.338707</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2.950000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>348.762500</td>\n      <td>21.000000</td>\n      <td>25.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>898.915000</td>\n      <td>53.000000</td>\n      <td>95.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2307.090000</td>\n      <td>142.000000</td>\n      <td>379.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>608821.650000</td>\n      <td>12890.000000</td>\n      <td>738.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\nFrom this table, we found:\n- **Problem:** Mean and Variance(Here std deviation) are not Equal\n- **Solution:** Scaling variables by using a scaler from scikit-learn library","metadata":{}},{"cell_type":"markdown","source":"### Checking for Skewness Assumption","metadata":{}},{"cell_type":"code","source":"from scipy.stats import skew","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-11-07T11:24:08.540056Z","iopub.execute_input":"2023-11-07T11:24:08.540765Z","iopub.status.idle":"2023-11-07T11:24:08.546014Z","shell.execute_reply.started":"2023-11-07T11:24:08.540716Z","shell.execute_reply":"2023-11-07T11:24:08.544538Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"skew_df = pd.DataFrame(columns=['Feature Name', 'Skewness'])\n\nrfm_metrics = ['Recency','Frequency','Monetary']\n\nfor feature in rfm_metrics:\n    skewness = skew(rfm[feature])\n    skew_df = skew_df._append({'Feature Name': feature, 'Skewness': skewness}, ignore_index=True)\n\nprint(skew_df)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:08.825759Z","iopub.execute_input":"2023-11-07T11:24:08.826205Z","iopub.status.idle":"2023-11-07T11:24:08.84582Z","shell.execute_reply.started":"2023-11-07T11:24:08.826168Z","shell.execute_reply":"2023-11-07T11:24:08.84488Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stdout","text":"  Feature Name   Skewness\n0      Recency   0.886972\n1    Frequency  18.051480\n2     Monetary  25.307775\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**`Note:`** **append** method in pandas is now modified to **_append**","metadata":{}},{"cell_type":"markdown","source":"#### Inference\n- **Recency** has a **mild positive skew** suggesting a slight right-leaning distribution. It is acceptable.\n- **Frequency** exhibits very **high positive skewness** indicating an imbalanced distribution with a **few high-frequency outliers**.\n- **Monetary** has **extremely high positive skewness** signifying a heavy right-skewed distribution with a **concentration of low values** and a **few exceptionally high monetary values**.\n\n<br>\nFrom above observation, we found: \n\n- **Problem:** UnSymmetric distribution of variables (data skewed)\n- **Solution:** Logarithmic transformation (positive values only) will manage skewness","metadata":{}},{"cell_type":"markdown","source":"### Preprocessing Steps for Model Building\n\n1. **Unskew the Data - Log Transformation:** Log transformation is typically used to reduce the impact of skewness in the data, especially when the data is positively skewed (skewed to the right). Taking the log of data can make it more symmetric and easier to work with. However, log transformation **can only be applied to positive data** because the logarithm of zero or a negative number is undefined. Therefore, this step should come first to address skewness.\n\n\n2. **Standardize to the Same Average Values:** Standardization (or mean centering) involves subtracting the mean (average) of the data from each data point. This step helps make different variables have the same average (zero) and can make the data more suitable for certain clustering algorithms like K-Means, which are sensitive to variable scales. If you standardize before unskewing (log transformation), you could introduce bias into your data, making the log transformation less effective.\n\n3. **Scale to the Same Standard Deviation:** Scaling involves dividing each data point by the standard deviation of the variable. This step ensures that variables have the same scale and equal importance in distance-based algorithms like K-Means. If you scale before unskewing or standardizing, it can lead to unwanted effects because you are dividing by a different standard deviation.\n\n4. **Store as a Separate Array for Clustering:** This step is more about data organization and does not affect the data values themselves. It's important to keep a separate copy of your preprocessed data for clustering so that you can compare it with the original data or use it for various clustering algorithms.\n\n**`Note:`** Sequence of preprocessing steps is crucial because each step builds upon the previous one and aims to address specific issues in the data. Applying them in the wrong order can lead to unintended consequences and inaccurate results. For example, Log transformation only works with positive data and Normalization forces data to have negative values and log will not work","metadata":{}},{"cell_type":"markdown","source":"### Unskew Data with Log Transformation","metadata":{}},{"cell_type":"code","source":"rfm_log_transform = rfm[['Frequency', 'Monetary']].apply(np.log, axis = 1).round(3)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:10.208994Z","iopub.execute_input":"2023-11-07T11:24:10.209646Z","iopub.status.idle":"2023-11-07T11:24:10.217564Z","shell.execute_reply.started":"2023-11-07T11:24:10.209605Z","shell.execute_reply":"2023-11-07T11:24:10.216388Z"},"trusted":true},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"skew_log_transform_df = pd.DataFrame(columns=['Feature Name', 'Skewness'])\n\nrfm_lof_transform_features = ['Frequency','Monetary']\n\nfor feature in rfm_lof_transform_features:\n    skewness = skew(rfm_log_transform[feature])\n    skew_log_transform_df = skew_log_transform_df._append({'Feature Name': feature, 'Skewness': skewness}, ignore_index=True)\n\nprint(skew_log_transform_df)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:10.504908Z","iopub.execute_input":"2023-11-07T11:24:10.505328Z","iopub.status.idle":"2023-11-07T11:24:10.522398Z","shell.execute_reply.started":"2023-11-07T11:24:10.505295Z","shell.execute_reply":"2023-11-07T11:24:10.521041Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"  Feature Name  Skewness\n0    Frequency -0.223792\n1     Monetary  0.251000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Now the skewness of all three RFM dimensions lies between -1 to 1 which is acceptable for further processing.**","metadata":{}},{"cell_type":"code","source":"rfm_log_transform.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:11.095032Z","iopub.execute_input":"2023-11-07T11:24:11.095761Z","iopub.status.idle":"2023-11-07T11:24:11.106473Z","shell.execute_reply.started":"2023-11-07T11:24:11.095699Z","shell.execute_reply":"2023-11-07T11:24:11.105243Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"   Frequency  Monetary\n0      3.526    11.259\n1      5.533     8.636\n2      3.932     7.611\n3      5.165     8.396\n4      2.833     5.812","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3.526</td>\n      <td>11.259</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.533</td>\n      <td>8.636</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.932</td>\n      <td>7.611</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5.165</td>\n      <td>8.396</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.833</td>\n      <td>5.812</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:11.370977Z","iopub.execute_input":"2023-11-07T11:24:11.371356Z","iopub.status.idle":"2023-11-07T11:24:11.382883Z","shell.execute_reply.started":"2023-11-07T11:24:11.371328Z","shell.execute_reply":"2023-11-07T11:24:11.381628Z"},"trusted":true},"execution_count":65,"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency\n0     12346.0  77556.46         34      325\n1     12347.0   5633.32        253        1\n2     12348.0   2019.40         51       74\n3     12349.0   4428.69        175       18\n4     12350.0    334.40         17      309","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_log_transform['Customer ID'] = rfm['Customer ID']","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:11.634053Z","iopub.execute_input":"2023-11-07T11:24:11.634429Z","iopub.status.idle":"2023-11-07T11:24:11.641371Z","shell.execute_reply.started":"2023-11-07T11:24:11.634401Z","shell.execute_reply":"2023-11-07T11:24:11.640057Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"rfm_log_transform['Recency'] = rfm['Recency']","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:11.90793Z","iopub.execute_input":"2023-11-07T11:24:11.908348Z","iopub.status.idle":"2023-11-07T11:24:11.914968Z","shell.execute_reply.started":"2023-11-07T11:24:11.908315Z","shell.execute_reply":"2023-11-07T11:24:11.913647Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"rfm_log_transform","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:12.163696Z","iopub.execute_input":"2023-11-07T11:24:12.164137Z","iopub.status.idle":"2023-11-07T11:24:12.180171Z","shell.execute_reply.started":"2023-11-07T11:24:12.164103Z","shell.execute_reply":"2023-11-07T11:24:12.179265Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"      Frequency  Monetary Customer ID  Recency\n0         3.526    11.259     12346.0      325\n1         5.533     8.636     12347.0        1\n2         3.932     7.611     12348.0       74\n3         5.165     8.396     12349.0       18\n4         2.833     5.812     12350.0      309\n...         ...       ...         ...      ...\n5873      6.894     7.914     18283.0        3\n5874      3.332     6.135     18284.0      431\n5875      2.485     6.057     18285.0      660\n5876      4.205     7.167     18286.0      476\n5877      5.043     8.339     18287.0       42\n\n[5878 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n      <th>Customer ID</th>\n      <th>Recency</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3.526</td>\n      <td>11.259</td>\n      <td>12346.0</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.533</td>\n      <td>8.636</td>\n      <td>12347.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.932</td>\n      <td>7.611</td>\n      <td>12348.0</td>\n      <td>74</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5.165</td>\n      <td>8.396</td>\n      <td>12349.0</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.833</td>\n      <td>5.812</td>\n      <td>12350.0</td>\n      <td>309</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5873</th>\n      <td>6.894</td>\n      <td>7.914</td>\n      <td>18283.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5874</th>\n      <td>3.332</td>\n      <td>6.135</td>\n      <td>18284.0</td>\n      <td>431</td>\n    </tr>\n    <tr>\n      <th>5875</th>\n      <td>2.485</td>\n      <td>6.057</td>\n      <td>18285.0</td>\n      <td>660</td>\n    </tr>\n    <tr>\n      <th>5876</th>\n      <td>4.205</td>\n      <td>7.167</td>\n      <td>18286.0</td>\n      <td>476</td>\n    </tr>\n    <tr>\n      <th>5877</th>\n      <td>5.043</td>\n      <td>8.339</td>\n      <td>18287.0</td>\n      <td>42</td>\n    </tr>\n  </tbody>\n</table>\n<p>5878 rows × 4 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_log_transform = rfm_log_transform[['Customer ID','Recency','Frequency','Monetary']]","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:12.469068Z","iopub.execute_input":"2023-11-07T11:24:12.470474Z","iopub.status.idle":"2023-11-07T11:24:12.477212Z","shell.execute_reply.started":"2023-11-07T11:24:12.47043Z","shell.execute_reply":"2023-11-07T11:24:12.475994Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"rfm_log_transform","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:12.761848Z","iopub.execute_input":"2023-11-07T11:24:12.762243Z","iopub.status.idle":"2023-11-07T11:24:12.77951Z","shell.execute_reply.started":"2023-11-07T11:24:12.762214Z","shell.execute_reply":"2023-11-07T11:24:12.778184Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"     Customer ID  Recency  Frequency  Monetary\n0        12346.0      325      3.526    11.259\n1        12347.0        1      5.533     8.636\n2        12348.0       74      3.932     7.611\n3        12349.0       18      5.165     8.396\n4        12350.0      309      2.833     5.812\n...          ...      ...        ...       ...\n5873     18283.0        3      6.894     7.914\n5874     18284.0      431      3.332     6.135\n5875     18285.0      660      2.485     6.057\n5876     18286.0      476      4.205     7.167\n5877     18287.0       42      5.043     8.339\n\n[5878 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Recency</th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>325</td>\n      <td>3.526</td>\n      <td>11.259</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>1</td>\n      <td>5.533</td>\n      <td>8.636</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>74</td>\n      <td>3.932</td>\n      <td>7.611</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>18</td>\n      <td>5.165</td>\n      <td>8.396</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>309</td>\n      <td>2.833</td>\n      <td>5.812</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5873</th>\n      <td>18283.0</td>\n      <td>3</td>\n      <td>6.894</td>\n      <td>7.914</td>\n    </tr>\n    <tr>\n      <th>5874</th>\n      <td>18284.0</td>\n      <td>431</td>\n      <td>3.332</td>\n      <td>6.135</td>\n    </tr>\n    <tr>\n      <th>5875</th>\n      <td>18285.0</td>\n      <td>660</td>\n      <td>2.485</td>\n      <td>6.057</td>\n    </tr>\n    <tr>\n      <th>5876</th>\n      <td>18286.0</td>\n      <td>476</td>\n      <td>4.205</td>\n      <td>7.167</td>\n    </tr>\n    <tr>\n      <th>5877</th>\n      <td>18287.0</td>\n      <td>42</td>\n      <td>5.043</td>\n      <td>8.339</td>\n    </tr>\n  </tbody>\n</table>\n<p>5878 rows × 4 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm_log_transform.describe()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:13.291626Z","iopub.execute_input":"2023-11-07T11:24:13.29204Z","iopub.status.idle":"2023-11-07T11:24:13.315195Z","shell.execute_reply.started":"2023-11-07T11:24:13.292008Z","shell.execute_reply":"2023-11-07T11:24:13.31404Z"},"trusted":true},"execution_count":71,"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"           Recency    Frequency     Monetary\ncount  5878.000000  5878.000000  5878.000000\nmean    200.331916     3.948703     6.833839\nstd     209.338707     1.443745     1.391568\nmin       0.000000     0.000000     1.082000\n25%      25.000000     3.045000     5.854000\n50%      95.000000     3.970000     6.801000\n75%     379.000000     4.956000     7.743500\nmax     738.000000     9.464000    13.319000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Recency</th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5878.000000</td>\n      <td>5878.000000</td>\n      <td>5878.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>200.331916</td>\n      <td>3.948703</td>\n      <td>6.833839</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>209.338707</td>\n      <td>1.443745</td>\n      <td>1.391568</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.082000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>25.000000</td>\n      <td>3.045000</td>\n      <td>5.854000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>95.000000</td>\n      <td>3.970000</td>\n      <td>6.801000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>379.000000</td>\n      <td>4.956000</td>\n      <td>7.743500</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>738.000000</td>\n      <td>9.464000</td>\n      <td>13.319000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Normalization using Standard Scaler","metadata":{}},{"cell_type":"code","source":"rfm_normalization = rfm_log_transform[['Recency','Frequency','Monetary']]","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:13.619866Z","iopub.execute_input":"2023-11-07T11:24:13.62026Z","iopub.status.idle":"2023-11-07T11:24:13.62729Z","shell.execute_reply.started":"2023-11-07T11:24:13.620233Z","shell.execute_reply":"2023-11-07T11:24:13.625999Z"},"trusted":true},"execution_count":72,"outputs":[]},{"cell_type":"code","source":"rfm_normalization","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:14.117955Z","iopub.execute_input":"2023-11-07T11:24:14.11923Z","iopub.status.idle":"2023-11-07T11:24:14.136298Z","shell.execute_reply.started":"2023-11-07T11:24:14.119174Z","shell.execute_reply":"2023-11-07T11:24:14.1351Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"      Recency  Frequency  Monetary\n0         325      3.526    11.259\n1           1      5.533     8.636\n2          74      3.932     7.611\n3          18      5.165     8.396\n4         309      2.833     5.812\n...       ...        ...       ...\n5873        3      6.894     7.914\n5874      431      3.332     6.135\n5875      660      2.485     6.057\n5876      476      4.205     7.167\n5877       42      5.043     8.339\n\n[5878 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Recency</th>\n      <th>Frequency</th>\n      <th>Monetary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>325</td>\n      <td>3.526</td>\n      <td>11.259</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>5.533</td>\n      <td>8.636</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>74</td>\n      <td>3.932</td>\n      <td>7.611</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>18</td>\n      <td>5.165</td>\n      <td>8.396</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>309</td>\n      <td>2.833</td>\n      <td>5.812</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5873</th>\n      <td>3</td>\n      <td>6.894</td>\n      <td>7.914</td>\n    </tr>\n    <tr>\n      <th>5874</th>\n      <td>431</td>\n      <td>3.332</td>\n      <td>6.135</td>\n    </tr>\n    <tr>\n      <th>5875</th>\n      <td>660</td>\n      <td>2.485</td>\n      <td>6.057</td>\n    </tr>\n    <tr>\n      <th>5876</th>\n      <td>476</td>\n      <td>4.205</td>\n      <td>7.167</td>\n    </tr>\n    <tr>\n      <th>5877</th>\n      <td>42</td>\n      <td>5.043</td>\n      <td>8.339</td>\n    </tr>\n  </tbody>\n</table>\n<p>5878 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(rfm_normalization)\n#Store it separately for clustering\nrfm_normalized = scaler.transform(rfm_normalization)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:14.860303Z","iopub.execute_input":"2023-11-07T11:24:14.860708Z","iopub.status.idle":"2023-11-07T11:24:14.872156Z","shell.execute_reply.started":"2023-11-07T11:24:14.860676Z","shell.execute_reply":"2023-11-07T11:24:14.871047Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"rfm_normalized","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:15.189189Z","iopub.execute_input":"2023-11-07T11:24:15.189917Z","iopub.status.idle":"2023-11-07T11:24:15.198377Z","shell.execute_reply.started":"2023-11-07T11:24:15.189873Z","shell.execute_reply":"2023-11-07T11:24:15.197175Z"},"trusted":true},"execution_count":75,"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"array([[ 0.59558355, -0.29280739,  3.18025313],\n       [-0.95227909,  1.09744536,  1.29516833],\n       [-0.60353226, -0.01157041,  0.55852634],\n       ...,\n       [ 2.19599709, -1.01391008, -0.55829477],\n       [ 1.31696398,  0.17753721,  0.2394346 ],\n       [-0.75640758,  0.75802142,  1.08172182]])"},"metadata":{}}]},{"cell_type":"markdown","source":"**Now Normalization of all three RFM dimensions done and saved in separate array, we are now ready for Clustering.**","metadata":{}},{"cell_type":"markdown","source":"### Chosing Number of Clusters\n\n#### Methods to define the number of Clusters\n- 1. Visual Method: Elbow Criteria\n- 2. Mathematical Method: Silhouette Coefficient\n- 3. Experimentation and Interpretation","metadata":{}},{"cell_type":"markdown","source":"### Steps Involved in Elbow Criteria Method\n\n1. **Within-Cluster Sum-of-Squared-Errors (SSE):** The SSE is a measure of the variability within each cluster. It is calculated as the sum of the squared distances between each data point and the center of its assigned cluster. In K-Means clustering, the goal is to **minimize the SSE** because it indicates that data points within each cluster are close to each other.\n\n2. **Plotting the Number of Clusters vs. SSE:** To determine the optimal number of clusters, we can perform K-Means clustering with different values of k (the number of clusters) and calculate the SSE for each value of k. We then plot the number of clusters (k) on the x-axis and the corresponding SSE on the y-axis.\n\n3. **Identifying the Elbow Point:** When we plot the SSE against the number of clusters, we often observe a pattern where the SSE decreases as the number of clusters increases. However, at some point, adding more clusters starts to have diminishing returns in terms of reducing SSE. The point where the **rate of decrease sharply changes**, forming an **elbow** in the plot is often considered the optimal number of clusters.\n\n   - Before the elbow point, adding more clusters significantly reduces SSE, indicating that the clusters are too large, and data points are far from their cluster centers.\n   - After the elbow point, adding more clusters has less impact on reducing SSE, suggesting that the clusters are becoming too granular, and overfitting may occur.\n   \n   \n### What If Elbow Point is clearly Identifiable\n\n- The optimal number of clusters is typically determined visually by looking at the plot. However, it is not always straightforward and there may not be a clear and distinct elbow. In such cases, you might need to use additional methods such as **silhouette coefficient** or make an **informed decision based on domain knowledge** and the specific goals of your analysis. \n\n- It is important to note that the choice of the optimal number of clusters is not always definitive and it may require **experimentation and interpretation**. Sometimes, we might choose a number of clusters that aligns with our problem's requirements or provides meaningful insights even if it's not the exact \"elbow\" point.\n\n\n**`Note:`** The elbow criterion method is a valuable tool for guiding the selection of the number of clusters in K-Means clustering but it is essential to consider it alongside other factors and domain knowledge to make the final decision.","metadata":{}},{"cell_type":"markdown","source":"#### Method-1: Using `.score()` method","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\ncluster_iteration = range(1,10)\nscores = []\n\nfor cluster_number in cluster_iteration:\n    K_Means = KMeans(n_clusters=cluster_number, random_state=45)\n    K_Means.fit(rfm_normalized)\n    scores.append(K_Means.fit(rfm_normalized).score(rfm_normalized))","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:16.608921Z","iopub.execute_input":"2023-11-07T11:24:16.609369Z","iopub.status.idle":"2023-11-07T11:24:41.786588Z","shell.execute_reply.started":"2023-11-07T11:24:16.609327Z","shell.execute_reply":"2023-11-07T11:24:41.785679Z"},"trusted":true},"execution_count":76,"outputs":[]},{"cell_type":"markdown","source":"#### Elbow Curve (Number of Clusters Vs Score)","metadata":{}},{"cell_type":"code","source":"plt.plot(cluster_iteration,scores)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.title('Elbow Curve')\nplt.xticks(cluster_iteration)\nplt.style.use('ggplot')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:41.788195Z","iopub.execute_input":"2023-11-07T11:24:41.788758Z","iopub.status.idle":"2023-11-07T11:24:42.066113Z","shell.execute_reply.started":"2023-11-07T11:24:41.788709Z","shell.execute_reply":"2023-11-07T11:24:42.064824Z"},"trusted":true},"execution_count":77,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\n- From the Elbow Curve, we found that optimal **number of clusters (n_clusters) is 5**","metadata":{}},{"cell_type":"markdown","source":"#### Method-2: Using `.inertia_` method (Within-Cluster Sum of Sqaures)","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\ncluster_iteration = range(1,10)\ninertias = []\n\nfor cluster_number in cluster_iteration:\n    K_Means = KMeans(n_clusters=cluster_number, random_state=45)\n    K_Means.fit(rfm_normalized)\n    inertias.append(K_Means.inertia_)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2023-11-07T11:24:42.067544Z","iopub.execute_input":"2023-11-07T11:24:42.067916Z","iopub.status.idle":"2023-11-07T11:24:53.306499Z","shell.execute_reply.started":"2023-11-07T11:24:42.067886Z","shell.execute_reply":"2023-11-07T11:24:53.305586Z"},"trusted":true},"execution_count":78,"outputs":[]},{"cell_type":"markdown","source":"#### Elbow Curve (Number of Clusters Vs Inertia)","metadata":{}},{"cell_type":"code","source":"plt.plot(cluster_iteration,inertias)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia(Within-Cluster Sum of Squares)')\nplt.title('Elbow Curve')\nplt.xticks(cluster_iteration)\nplt.style.use('ggplot')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:53.309306Z","iopub.execute_input":"2023-11-07T11:24:53.310142Z","iopub.status.idle":"2023-11-07T11:24:53.596837Z","shell.execute_reply.started":"2023-11-07T11:24:53.310097Z","shell.execute_reply":"2023-11-07T11:24:53.595757Z"},"trusted":true},"execution_count":79,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\n- From the Elbow Curve, we found that optimal **number of clusters (n_clusters) is 5**","metadata":{}},{"cell_type":"markdown","source":"### Silhouette Score Method\n\n$$\\text{Silhouette Score} = \\frac{p - q}{\\max(p, q)}$$\n\n- **`p`** is the average distance from the data point to other data points in the same cluster (intra-cluster distance)\n\n- **`q`** is is the smallest average distance from the data point to data points in a different cluster, minimized over clusters (inter-cluster distance).\n\nThe value of the silhouette score range lies between **-1 to 1**. \n\n    - A high silhouette score indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters.\n    - A score near 0 indicates that the object is on or very close to the decision boundary between two neighboring clusters.\n    - A low score indicates that the object may have been assigned to the wrong cluster.","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\ncluster_iteration = range(2,10)  # Start from at least 2 clusters (Silhouette Score Requirement)\ninertias = []\n\nfor cluster_number in cluster_iteration:\n    K_Means = KMeans(n_clusters=cluster_number, random_state=45)\n    K_Means.fit(rfm_normalized)\n    clustered_labels = K_Means.labels_\n    \n    silhouette_avg = silhouette_score(rfm_normalized,clustered_labels)\n    print(f'For n_clusters={cluster_number}, the Silhouette score is {silhouette_avg}')","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:24:53.598472Z","iopub.execute_input":"2023-11-07T11:24:53.599131Z","iopub.status.idle":"2023-11-07T11:25:08.058786Z","shell.execute_reply.started":"2023-11-07T11:24:53.599089Z","shell.execute_reply":"2023-11-07T11:25:08.057706Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stdout","text":"For n_clusters=2, the Silhouette score is 0.4123261308720177\nFor n_clusters=3, the Silhouette score is 0.365780580504164\nFor n_clusters=4, the Silhouette score is 0.36338727455806596\nFor n_clusters=5, the Silhouette score is 0.34481314227766485\nFor n_clusters=6, the Silhouette score is 0.3125165446014721\nFor n_clusters=7, the Silhouette score is 0.310116847330462\nFor n_clusters=8, the Silhouette score is 0.31155065749796657\nFor n_clusters=9, the Silhouette score is 0.290639337470191\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### Inference\n\n- From Silhouette Score Analysis for different clusters, we found that optimal **number of cluster(n_clusters) is 5**.","metadata":{}},{"cell_type":"markdown","source":"**`Note:`** The choice of number of clusters should be based on combination of quantitative metrics like Elbow method, silhouette score and domain specific knnowledge to ensure that the clusters make sense for your specific use case.","metadata":{}},{"cell_type":"markdown","source":"### Final Model with number of clusters(n_cluster) = 5","metadata":{}},{"cell_type":"code","source":"# Clustering for final model\nK_Means_final_model = KMeans(n_clusters= 5, random_state=45)\nK_Means_final_model.fit(rfm_normalized)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:08.060211Z","iopub.execute_input":"2023-11-07T11:25:08.060606Z","iopub.status.idle":"2023-11-07T11:25:09.307064Z","shell.execute_reply.started":"2023-11-07T11:25:08.060578Z","shell.execute_reply":"2023-11-07T11:25:09.306204Z"},"trusted":true},"execution_count":81,"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"KMeans(n_clusters=5, random_state=45)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=5, random_state=45)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=5, random_state=45)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"#Create a cluster label column in the original DataFrame\ncluster_labels = K_Means_final_model.labels_","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.308446Z","iopub.execute_input":"2023-11-07T11:25:09.309102Z","iopub.status.idle":"2023-11-07T11:25:09.312841Z","shell.execute_reply.started":"2023-11-07T11:25:09.309065Z","shell.execute_reply":"2023-11-07T11:25:09.312091Z"},"trusted":true},"execution_count":82,"outputs":[]},{"cell_type":"code","source":"cluster_labels","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.31413Z","iopub.execute_input":"2023-11-07T11:25:09.314695Z","iopub.status.idle":"2023-11-07T11:25:09.326498Z","shell.execute_reply.started":"2023-11-07T11:25:09.314664Z","shell.execute_reply":"2023-11-07T11:25:09.325681Z"},"trusted":true},"execution_count":83,"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"array([4, 4, 0, ..., 1, 3, 4], dtype=int32)"},"metadata":{}}]},{"cell_type":"code","source":"rfm['Cluster'] = cluster_labels","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.327689Z","iopub.execute_input":"2023-11-07T11:25:09.328052Z","iopub.status.idle":"2023-11-07T11:25:09.337824Z","shell.execute_reply.started":"2023-11-07T11:25:09.328021Z","shell.execute_reply":"2023-11-07T11:25:09.337Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"rfm.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.341307Z","iopub.execute_input":"2023-11-07T11:25:09.341978Z","iopub.status.idle":"2023-11-07T11:25:09.354779Z","shell.execute_reply.started":"2023-11-07T11:25:09.341942Z","shell.execute_reply":"2023-11-07T11:25:09.353997Z"},"trusted":true},"execution_count":85,"outputs":[{"execution_count":85,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency  Cluster\n0     12346.0  77556.46         34      325        4\n1     12347.0   5633.32        253        1        4\n2     12348.0   2019.40         51       74        0\n3     12349.0   4428.69        175       18        4\n4     12350.0    334.40         17      309        2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Cluster</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm.groupby('Cluster').agg({'Recency': 'mean',\n                            'Frequency': 'mean',\n                            'Monetary': ['mean', 'count'],}).round(0)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.356091Z","iopub.execute_input":"2023-11-07T11:25:09.356667Z","iopub.status.idle":"2023-11-07T11:25:09.377757Z","shell.execute_reply.started":"2023-11-07T11:25:09.356636Z","shell.execute_reply":"2023-11-07T11:25:09.376213Z"},"trusted":true},"execution_count":86,"outputs":[{"execution_count":86,"output_type":"execute_result","data":{"text/plain":"        Recency Frequency Monetary      \n           mean      mean     mean count\nCluster                                 \n0          66.0      87.0   1427.0  1754\n1         537.0      13.0    252.0   873\n2         115.0      17.0    333.0   965\n3         412.0      66.0   1141.0  1028\n4          46.0     444.0  10752.0  1258","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Recency</th>\n      <th>Frequency</th>\n      <th colspan=\"2\" halign=\"left\">Monetary</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>count</th>\n    </tr>\n    <tr>\n      <th>Cluster</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>66.0</td>\n      <td>87.0</td>\n      <td>1427.0</td>\n      <td>1754</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>537.0</td>\n      <td>13.0</td>\n      <td>252.0</td>\n      <td>873</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>115.0</td>\n      <td>17.0</td>\n      <td>333.0</td>\n      <td>965</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>412.0</td>\n      <td>66.0</td>\n      <td>1141.0</td>\n      <td>1028</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>46.0</td>\n      <td>444.0</td>\n      <td>10752.0</td>\n      <td>1258</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\n\t\n- **Cluster_0:**\t1259\n- **Cluster_1:**\t873\n- **Cluster_2:**\t1752\n- **Cluster_3:**\t1029\n- **Cluster_4:**\t965","metadata":{}},{"cell_type":"code","source":"rfm_scores['Cluster'] = cluster_labels","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.379182Z","iopub.execute_input":"2023-11-07T11:25:09.379546Z","iopub.status.idle":"2023-11-07T11:25:09.38545Z","shell.execute_reply.started":"2023-11-07T11:25:09.379505Z","shell.execute_reply":"2023-11-07T11:25:09.384199Z"},"trusted":true},"execution_count":87,"outputs":[]},{"cell_type":"code","source":"rfm_scores","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.387238Z","iopub.execute_input":"2023-11-07T11:25:09.387809Z","iopub.status.idle":"2023-11-07T11:25:09.416349Z","shell.execute_reply.started":"2023-11-07T11:25:09.387697Z","shell.execute_reply":"2023-11-07T11:25:09.41509Z"},"trusted":true},"execution_count":88,"outputs":[{"execution_count":88,"output_type":"execute_result","data":{"text/plain":"     Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0        12346.0  77556.46         34      325             2               2   \n1        12347.0   5633.32        253        1             5               5   \n2        12348.0   2019.40         51       74             3               3   \n3        12349.0   4428.69        175       18             5               4   \n4        12350.0    334.40         17      309             2               2   \n...          ...       ...        ...      ...           ...             ...   \n5873     18283.0   2736.65        986        3             5               5   \n5874     18284.0    461.68         28      431             1               2   \n5875     18285.0    427.00         12      660             1               1   \n5876     18286.0   1296.43         67      476             1               3   \n5877     18287.0   4182.99        155       42             4               4   \n\n     Monetary_Score RFM_Score_Segment  RFM_Score_Sum Segment Name  \\\n0                 5               225              9       Sliver   \n1                 5               555             15         Gold   \n2                 4               334             10         Gold   \n3                 5               545             14         Gold   \n4                 2               222              6       Sliver   \n...             ...               ...            ...          ...   \n5873              4               554             14         Gold   \n5874              2               122              5       Bronze   \n5875              2               112              4       Bronze   \n5876              4               134              8       Sliver   \n5877              5               445             13         Gold   \n\n              Segment     Segment_New  Cluster  \n0         Hibernating    Big Spenders        4  \n1           Champions  Best Customers        4  \n2      Need Attention    Big Spenders        0  \n3           Champions  Best Customers        4  \n4         Hibernating     Almost Lost        2  \n...               ...             ...      ...  \n5873        Champions  Best Customers        4  \n5874      Hibernating  Lost Customers        3  \n5875      Hibernating  Lost Customers        1  \n5876          At Risk    Big Spenders        3  \n5877  Loyal Customers  Best Customers        4  \n\n[5878 rows x 13 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n      <th>RFM_Score_Segment</th>\n      <th>RFM_Score_Sum</th>\n      <th>Segment Name</th>\n      <th>Segment</th>\n      <th>Segment_New</th>\n      <th>Cluster</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>225</td>\n      <td>9</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n      <td>Big Spenders</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>15</td>\n      <td>Gold</td>\n      <td>Champions</td>\n      <td>Best Customers</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>334</td>\n      <td>10</td>\n      <td>Gold</td>\n      <td>Need Attention</td>\n      <td>Big Spenders</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>545</td>\n      <td>14</td>\n      <td>Gold</td>\n      <td>Champions</td>\n      <td>Best Customers</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>222</td>\n      <td>6</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n      <td>Almost Lost</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5873</th>\n      <td>18283.0</td>\n      <td>2736.65</td>\n      <td>986</td>\n      <td>3</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>554</td>\n      <td>14</td>\n      <td>Gold</td>\n      <td>Champions</td>\n      <td>Best Customers</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>5874</th>\n      <td>18284.0</td>\n      <td>461.68</td>\n      <td>28</td>\n      <td>431</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>122</td>\n      <td>5</td>\n      <td>Bronze</td>\n      <td>Hibernating</td>\n      <td>Lost Customers</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5875</th>\n      <td>18285.0</td>\n      <td>427.00</td>\n      <td>12</td>\n      <td>660</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>112</td>\n      <td>4</td>\n      <td>Bronze</td>\n      <td>Hibernating</td>\n      <td>Lost Customers</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5876</th>\n      <td>18286.0</td>\n      <td>1296.43</td>\n      <td>67</td>\n      <td>476</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>134</td>\n      <td>8</td>\n      <td>Sliver</td>\n      <td>At Risk</td>\n      <td>Big Spenders</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>5877</th>\n      <td>18287.0</td>\n      <td>4182.99</td>\n      <td>155</td>\n      <td>42</td>\n      <td>4</td>\n      <td>4</td>\n      <td>5</td>\n      <td>445</td>\n      <td>13</td>\n      <td>Gold</td>\n      <td>Loyal Customers</td>\n      <td>Best Customers</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>5878 rows × 13 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nrfm_scores.boxplot(column='Recency', by='Cluster', patch_artist=True, showfliers=False)\nplt.xlabel('Cluster')\nplt.ylabel('Recency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.417871Z","iopub.execute_input":"2023-11-07T11:25:09.418331Z","iopub.status.idle":"2023-11-07T11:25:09.736233Z","shell.execute_reply.started":"2023-11-07T11:25:09.418297Z","shell.execute_reply":"2023-11-07T11:25:09.735234Z"},"trusted":true},"execution_count":89,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nrfm_scores.boxplot(column='Frequency', by='Cluster', patch_artist=True, showfliers=False)\nplt.xlabel('Cluster')\nplt.ylabel('Frequency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:09.737633Z","iopub.execute_input":"2023-11-07T11:25:09.738128Z","iopub.status.idle":"2023-11-07T11:25:10.018297Z","shell.execute_reply.started":"2023-11-07T11:25:09.738051Z","shell.execute_reply":"2023-11-07T11:25:10.017297Z"},"trusted":true},"execution_count":90,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nrfm_scores.boxplot(column='Monetary', by='Cluster', patch_artist=True, showfliers=False)\nplt.xlabel('Cluster')\nplt.ylabel('Monetary')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:10.01949Z","iopub.execute_input":"2023-11-07T11:25:10.019983Z","iopub.status.idle":"2023-11-07T11:25:10.320485Z","shell.execute_reply.started":"2023-11-07T11:25:10.019938Z","shell.execute_reply":"2023-11-07T11:25:10.319339Z"},"trusted":true},"execution_count":91,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference","metadata":{}},{"cell_type":"markdown","source":"## 9) Model-II : Hierarchical Clustering\n---\n\nHierarchical clustering is a method of cluster analysis that builds a hierarchy of clusters by successively merging or splitting them. There are two main approaches to hierarchical clustering: **divisive and agglomerative**.\n\n![image.jpg](https://raw.githubusercontent.com/manishkr1754/Online_Retail_Customer_Segmentation_RFM_Analysis/main/clustering_classification.jpg)\n\n\n### Some common linkage methods used in agglomerative hierarchical clustering:\n\n1. **Single Linkage (Minimum Linkage):** In single linkage hierarchical clustering, the distance between two clusters is defined as the **shortest distance between any two points** in each cluster.\n2. **Complete Linkage (Maximum Linkage):** In complete linkage hierarchical clustering, the distance between two clusters is defined as the **longest distance between any two points** in each cluster.\n3. **Average Linkage:** In average linkage hierarchical clustering, the distance between two clusters is defined as the **average distance between each point in one cluster** to every point in the other cluster.\n\n![image.png](https://raw.githubusercontent.com/manishkr1754/Online_Retail_Customer_Segmentation_RFM_Analysis/main/hierarchical_clustering.png)","metadata":{}},{"cell_type":"markdown","source":"#### Single Linkage","metadata":{}},{"cell_type":"code","source":"mergings = linkage(rfm_normalized, method=\"single\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:25:10.321481Z","iopub.execute_input":"2023-11-07T11:25:10.321828Z","iopub.status.idle":"2023-11-07T11:26:50.494401Z","shell.execute_reply.started":"2023-11-07T11:25:10.321791Z","shell.execute_reply":"2023-11-07T11:26:50.493053Z"},"trusted":true},"execution_count":92,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"#### Complete Linkage","metadata":{}},{"cell_type":"code","source":"mergings = linkage(rfm_normalized, method=\"complete\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:26:50.495857Z","iopub.execute_input":"2023-11-07T11:26:50.496219Z","iopub.status.idle":"2023-11-07T11:28:31.96979Z","shell.execute_reply.started":"2023-11-07T11:26:50.496188Z","shell.execute_reply":"2023-11-07T11:28:31.968488Z"},"trusted":true},"execution_count":93,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"#### Average Linkage","metadata":{}},{"cell_type":"code","source":"mergings = linkage(rfm_normalized, method=\"average\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:28:31.971277Z","iopub.execute_input":"2023-11-07T11:28:31.971704Z","iopub.status.idle":"2023-11-07T11:30:14.578012Z","shell.execute_reply.started":"2023-11-07T11:28:31.971665Z","shell.execute_reply":"2023-11-07T11:30:14.577066Z"},"trusted":true},"execution_count":94,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"markdown","source":"### Inference\n\nFrom the above dendograms, we found optimal **number of clusters(n_clusters) is 2**.","metadata":{}},{"cell_type":"markdown","source":"### Creating Cluster based cutting dendograms based on value of n_clusters","metadata":{}},{"cell_type":"code","source":"cluster_labels = cut_tree(mergings, n_clusters=2).reshape(-1, )\ncluster_labels","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:30:14.57946Z","iopub.execute_input":"2023-11-07T11:30:14.580054Z","iopub.status.idle":"2023-11-07T11:30:15.334123Z","shell.execute_reply.started":"2023-11-07T11:30:14.580019Z","shell.execute_reply":"2023-11-07T11:30:15.332995Z"},"trusted":true},"execution_count":95,"outputs":[{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 0, ..., 0, 0, 0])"},"metadata":{}}]},{"cell_type":"code","source":"rfm['Cluster_New'] = cluster_labels\nrfm.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:30:15.335455Z","iopub.execute_input":"2023-11-07T11:30:15.335808Z","iopub.status.idle":"2023-11-07T11:30:15.349326Z","shell.execute_reply.started":"2023-11-07T11:30:15.335774Z","shell.execute_reply":"2023-11-07T11:30:15.348141Z"},"trusted":true},"execution_count":96,"outputs":[{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency  Cluster  Cluster_New\n0     12346.0  77556.46         34      325        4            0\n1     12347.0   5633.32        253        1        4            0\n2     12348.0   2019.40         51       74        0            0\n3     12349.0   4428.69        175       18        4            0\n4     12350.0    334.40         17      309        2            0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Cluster</th>\n      <th>Cluster_New</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rfm.groupby('Cluster_New').agg({'Recency': 'mean',\n                            'Frequency': 'mean',\n                            'Monetary': ['mean', 'count'],}).round(0)","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:30:15.351046Z","iopub.execute_input":"2023-11-07T11:30:15.351393Z","iopub.status.idle":"2023-11-07T11:30:15.376713Z","shell.execute_reply.started":"2023-11-07T11:30:15.351364Z","shell.execute_reply":"2023-11-07T11:30:15.375315Z"},"trusted":true},"execution_count":97,"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"            Recency Frequency  Monetary      \n               mean      mean      mean count\nCluster_New                                  \n0             201.0     126.0    2610.0  5863\n1              98.0    4565.0  162671.0    15","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Recency</th>\n      <th>Frequency</th>\n      <th colspan=\"2\" halign=\"left\">Monetary</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>mean</th>\n      <th>count</th>\n    </tr>\n    <tr>\n      <th>Cluster_New</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>201.0</td>\n      <td>126.0</td>\n      <td>2610.0</td>\n      <td>5863</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>98.0</td>\n      <td>4565.0</td>\n      <td>162671.0</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"#### Inference\n- **Cluster_New_0:** 5863\n- **Cluster_New_1:** 15","metadata":{}},{"cell_type":"code","source":"rfm_scores['Cluster_New'] = cluster_labels\nrfm_scores.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:30:15.378196Z","iopub.execute_input":"2023-11-07T11:30:15.379139Z","iopub.status.idle":"2023-11-07T11:30:15.399973Z","shell.execute_reply.started":"2023-11-07T11:30:15.379093Z","shell.execute_reply":"2023-11-07T11:30:15.398835Z"},"trusted":true},"execution_count":98,"outputs":[{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"  Customer ID  Monetary  Frequency  Recency Recency_Score Frequency_Score  \\\n0     12346.0  77556.46         34      325             2               2   \n1     12347.0   5633.32        253        1             5               5   \n2     12348.0   2019.40         51       74             3               3   \n3     12349.0   4428.69        175       18             5               4   \n4     12350.0    334.40         17      309             2               2   \n\n  Monetary_Score RFM_Score_Segment  RFM_Score_Sum Segment Name  \\\n0              5               225              9       Sliver   \n1              5               555             15         Gold   \n2              4               334             10         Gold   \n3              5               545             14         Gold   \n4              2               222              6       Sliver   \n\n          Segment     Segment_New  Cluster  Cluster_New  \n0     Hibernating    Big Spenders        4            0  \n1       Champions  Best Customers        4            0  \n2  Need Attention    Big Spenders        0            0  \n3       Champions  Best Customers        4            0  \n4     Hibernating     Almost Lost        2            0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer ID</th>\n      <th>Monetary</th>\n      <th>Frequency</th>\n      <th>Recency</th>\n      <th>Recency_Score</th>\n      <th>Frequency_Score</th>\n      <th>Monetary_Score</th>\n      <th>RFM_Score_Segment</th>\n      <th>RFM_Score_Sum</th>\n      <th>Segment Name</th>\n      <th>Segment</th>\n      <th>Segment_New</th>\n      <th>Cluster</th>\n      <th>Cluster_New</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>12346.0</td>\n      <td>77556.46</td>\n      <td>34</td>\n      <td>325</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>225</td>\n      <td>9</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n      <td>Big Spenders</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>12347.0</td>\n      <td>5633.32</td>\n      <td>253</td>\n      <td>1</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>555</td>\n      <td>15</td>\n      <td>Gold</td>\n      <td>Champions</td>\n      <td>Best Customers</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12348.0</td>\n      <td>2019.40</td>\n      <td>51</td>\n      <td>74</td>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>334</td>\n      <td>10</td>\n      <td>Gold</td>\n      <td>Need Attention</td>\n      <td>Big Spenders</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12349.0</td>\n      <td>4428.69</td>\n      <td>175</td>\n      <td>18</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>545</td>\n      <td>14</td>\n      <td>Gold</td>\n      <td>Champions</td>\n      <td>Best Customers</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12350.0</td>\n      <td>334.40</td>\n      <td>17</td>\n      <td>309</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>222</td>\n      <td>6</td>\n      <td>Sliver</td>\n      <td>Hibernating</td>\n      <td>Almost Lost</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nrfm_scores.boxplot(column='Recency', by='Cluster_New', patch_artist=True, showfliers=False)\nplt.xlabel('Cluster_New')\nplt.ylabel('Recency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:30:15.401507Z","iopub.execute_input":"2023-11-07T11:30:15.401856Z","iopub.status.idle":"2023-11-07T11:30:15.658627Z","shell.execute_reply.started":"2023-11-07T11:30:15.401828Z","shell.execute_reply":"2023-11-07T11:30:15.657388Z"},"trusted":true},"execution_count":99,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nrfm_scores.boxplot(column='Frequency', by='Cluster_New', patch_artist=True, showfliers=False)\nplt.xlabel('Cluster_New')\nplt.ylabel('Frequency')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:30:15.660074Z","iopub.execute_input":"2023-11-07T11:30:15.660434Z","iopub.status.idle":"2023-11-07T11:30:15.915382Z","shell.execute_reply.started":"2023-11-07T11:30:15.660404Z","shell.execute_reply":"2023-11-07T11:30:15.914291Z"},"trusted":true},"execution_count":100,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nrfm_scores.boxplot(column='Monetary', by='Cluster_New', patch_artist=True, showfliers=False)\nplt.xlabel('Cluster_New')\nplt.ylabel('Monetary')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-07T11:30:15.916781Z","iopub.execute_input":"2023-11-07T11:30:15.917617Z","iopub.status.idle":"2023-11-07T11:30:16.164868Z","shell.execute_reply.started":"2023-11-07T11:30:15.917584Z","shell.execute_reply":"2023-11-07T11:30:16.163927Z"},"trusted":true},"execution_count":101,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 0 Axes>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]}]}